Prefix(:=<http://www.ease-crc.org/ont/SOMA-IO.owl#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(SOMA:=<http://www.ease-crc.org/ont/SOMA.owl#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.ease-crc.org/ont/SOMA-IO.owl>
Import(<http://www.ease-crc.org/ont/SOMA-ACT.owl>)
Import(<http://www.ease-crc.org/ont/SOMA-OBJ.owl>)
Import(<http://www.ease-crc.org/ont/SOMA-SAY.owl>)
Import(<http://www.ease-crc.org/ont/SOMA.owl>)
Annotation(rdfs:comment "SOMA-IO.owl defines concepts related to software modules and their interaction.

The concepts defined here are fairly general and cover such topics as interface specifications and communication. Some more specific concepts for the knowledge representation domain are also defined, such as Database and various kinds of reasoners.")

Declaration(Class(SOMA:API_Specification))
Declaration(Class(SOMA:Algorithm))
Declaration(Class(SOMA:ArchiveFile))
Declaration(Class(SOMA:ArchiveFormat))
Declaration(Class(SOMA:ArchiveText))
Declaration(Class(SOMA:Classifier))
Declaration(Class(SOMA:Client-Server_Specification))
Declaration(Class(SOMA:ClientRole))
Declaration(Class(SOMA:CognitiveAgent))
Declaration(Class(SOMA:Computer_Language))
Declaration(Class(SOMA:Computer_Program))
Declaration(Class(SOMA:Database))
Declaration(Class(SOMA:DesignedTool))
Declaration(Class(SOMA:Digital_File))
Declaration(Class(SOMA:ExecutableFile))
Declaration(Class(SOMA:ExecutableFormat))
Declaration(Class(SOMA:ExecutableSoftware))
Declaration(Class(SOMA:Executable_Code))
Declaration(Class(SOMA:FaultySoftware))
Declaration(Class(SOMA:FileConfiguration))
Declaration(Class(SOMA:File_format))
Declaration(Class(SOMA:FormalLanguage))
Declaration(Class(SOMA:GraphDatabase))
Declaration(Class(SOMA:GraphQueryLanguage))
Declaration(Class(SOMA:HostRole))
Declaration(Class(SOMA:Human-readable_Programming_Language))
Declaration(Class(SOMA:IncompatibleSoftware))
Declaration(Class(SOMA:InterfaceComponentRole))
Declaration(Class(SOMA:InterfaceSpecification))
Declaration(Class(SOMA:KnowledgeRepresentationLanguage))
Declaration(Class(SOMA:Language))
Declaration(Class(SOMA:Markup_Language))
Declaration(Class(SOMA:Natural_Language))
Declaration(Class(SOMA:Natural_Language_Text))
Declaration(Class(SOMA:Ontology))
Declaration(Class(SOMA:Ontology_Language))
Declaration(Class(SOMA:PluginRole))
Declaration(Class(SOMA:PluginSpecification))
Declaration(Class(SOMA:Programming_Language))
Declaration(Class(SOMA:QueryEngine))
Declaration(Class(SOMA:QueryLanguage))
Declaration(Class(SOMA:Reasoner))
Declaration(Class(SOMA:RelationalDatabase))
Declaration(Class(SOMA:RelationalQueryLanguage))
Declaration(Class(SOMA:ServerRole))
Declaration(Class(SOMA:Simulation_Reasoner))
Declaration(Class(SOMA:Software))
Declaration(Class(SOMA:SoftwareInstance))
Declaration(Class(SOMA:SoftwareLibrary))
Declaration(Class(SOMA:SoftwareRole))
Declaration(Class(SOMA:Software_Configuration))
Declaration(Class(SOMA:Source_Code))
Declaration(Class(SOMA:StatisticalReasoner))
Declaration(Class(SOMA:Structured_Text))
Declaration(Class(SOMA:SubCognitiveAgent))
Declaration(Class(SOMA:SymbolicReasoner))
Declaration(Class(SOMA:System))
Declaration(Class(SOMA:Text))
Declaration(Class(SOMA:Triplestore))
Declaration(Class(SOMA:UnavailableSoftware))
Declaration(ObjectProperty(SOMA:encodes))
Declaration(ObjectProperty(SOMA:givesMeaningTo))
Declaration(ObjectProperty(SOMA:isDesignFor))
Declaration(ObjectProperty(SOMA:isDesignedBy))
Declaration(ObjectProperty(SOMA:isGivenMeaningBy))

############################
#   Object Properties
############################

# Object Property: SOMA:encodes (SOMA:encodes)

AnnotationAssertion(rdfs:comment SOMA:encodes "The relation between two Information Objects that have the same meaning, but are formatted differently. E.g., a text written in UTF-8 encodes a text in a natural writing system (letters) and vice versa."@en)
SubObjectPropertyOf(SOMA:encodes <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#associatedWith>)
SymmetricObjectProperty(SOMA:encodes)
ObjectPropertyDomain(SOMA:encodes <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)
ObjectPropertyRange(SOMA:encodes <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)

# Object Property: SOMA:givesMeaningTo (gives meaning to)

AnnotationAssertion(rdfs:comment SOMA:givesMeaningTo "The relation between a System and Information Object that is given meaning to by said system, e.g., a Language might give meaning to some word, sentence, text, etc., but without the knowledge of said System (Language), the text will not make sense to a reader."@en)
AnnotationAssertion(rdfs:label SOMA:givesMeaningTo "gives meaning to"@en)
SubObjectPropertyOf(SOMA:givesMeaningTo <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#associatedWith>)
InverseObjectProperties(SOMA:givesMeaningTo SOMA:isGivenMeaningBy)
ObjectPropertyDomain(SOMA:givesMeaningTo SOMA:System)
ObjectPropertyRange(SOMA:givesMeaningTo <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)

# Object Property: SOMA:hasSoftwareAgent (has software agent)

ObjectPropertyRange(SOMA:hasSoftwareAgent SOMA:SoftwareInstance)

# Object Property: SOMA:isDesignFor (is design for)

AnnotationAssertion(rdfs:comment SOMA:isDesignFor "A special relation between a Design and an Object, to indicate that the Design describes a way to construct the Object."@en)
AnnotationAssertion(rdfs:label SOMA:isDesignFor "is design for"@en)
SubObjectPropertyOf(SOMA:isDesignFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes>)
InverseObjectProperties(SOMA:isDesignFor SOMA:isDesignedBy)
ObjectPropertyDomain(SOMA:isDesignFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Design>)
ObjectPropertyRange(SOMA:isDesignFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Object>)

# Object Property: SOMA:isDesignedBy (is designed by)

AnnotationAssertion(rdfs:comment SOMA:isDesignedBy "A special relation between a Design and an Object, to indicate that the Object is described by the Design."@en)
AnnotationAssertion(rdfs:label SOMA:isDesignedBy "is designed by"@en)
SubObjectPropertyOf(SOMA:isDesignedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDescribedBy>)
ObjectPropertyDomain(SOMA:isDesignedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Object>)
ObjectPropertyRange(SOMA:isDesignedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Design>)

# Object Property: SOMA:isGivenMeaningBy (is given meaning by)

AnnotationAssertion(rdfs:comment SOMA:isGivenMeaningBy "The relation between an Information Object and a System that gives meaning to said object, e.g., a word, sentence, text, etc. might be given meaning by a Language and without the knowledge of said System (Language), the text will not make sense to a reader."@en)
AnnotationAssertion(rdfs:label SOMA:isGivenMeaningBy "is given meaning by"@en)
SubObjectPropertyOf(SOMA:isGivenMeaningBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#associatedWith>)
ObjectPropertyDomain(SOMA:isGivenMeaningBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)
ObjectPropertyRange(SOMA:isGivenMeaningBy SOMA:System)

# Object Property: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#expresses> (expresses)

SubObjectPropertyOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#expresses> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isAbout>)

# Object Property: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isExpressedBy> (is expressed by)

SubObjectPropertyOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isExpressedBy> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isReferenceOf>)




############################
#   Classes
############################

# Class: SOMA:API_Specification (API Specification)

AnnotationAssertion(rdfs:comment SOMA:API_Specification "An application programming interface (API) is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use an API is called an API specification.

Source: https://en.wikipedia.org/wiki/API"@en)
AnnotationAssertion(rdfs:label SOMA:API_Specification "API Specification"@en)
SubClassOf(SOMA:API_Specification SOMA:InterfaceSpecification)

# Class: SOMA:Algorithm (Algorithm)

AnnotationAssertion(rdfs:comment SOMA:Algorithm "An Algorithm is a finite sequence of well-defined instructions, typically used to solve a class of specific problems or to perform a computation.

From Wikipedia: https://en.wikipedia.org/wiki/Algorithm"@en)
AnnotationAssertion(rdfs:label SOMA:Algorithm "Algorithm"@en)
SubClassOf(SOMA:Algorithm <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Plan>)

# Class: SOMA:ArchiveFile (Archive File)

AnnotationAssertion(rdfs:comment SOMA:ArchiveFile "An archive file is a computer file that is composed of one or more files along with metadata.

Source: https://en.wikipedia.org/wiki/Archive_file"@en)
AnnotationAssertion(rdfs:label SOMA:ArchiveFile "Archive File")
EquivalentClasses(SOMA:ArchiveFile ObjectIntersectionOf(SOMA:Digital_File ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#realizes> SOMA:ArchiveText)))
SubClassOf(SOMA:ArchiveFile SOMA:Digital_File)

# Class: SOMA:ArchiveFormat (Archive Format)

AnnotationAssertion(rdfs:comment SOMA:ArchiveFormat "An Archive Format is the file format of an archive file.

Source: https://en.wikipedia.org/wiki/Archive_file#Archive_formats"@en)
AnnotationAssertion(rdfs:label SOMA:ArchiveFormat "Archive Format"@en)
SubClassOf(SOMA:ArchiveFormat SOMA:File_format)
SubClassOf(SOMA:ArchiveFormat ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:ArchiveText))

# Class: SOMA:ArchiveText (Archive Text)

AnnotationAssertion(rdfs:comment SOMA:ArchiveText "An Archive is a Structured Text that is composed of one or more Structured Texts along with metadata. Archives are used to collect multiple texts together into a single text for easier portability and storage as Archive Files, or simply to compress text to use less storage space as Computer Files. Archive often store directory structures, error detection and correction information, arbitrary comments, and sometimes use built-in encryption.

Source: https://en.wikipedia.org/wiki/Archive_file"@en)
AnnotationAssertion(rdfs:label SOMA:ArchiveText "Archive Text"@en)
EquivalentClasses(SOMA:ArchiveText ObjectIntersectionOf(SOMA:Structured_Text ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#expresses> SOMA:FileConfiguration)))
EquivalentClasses(SOMA:ArchiveText ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:ArchiveFormat))

# Class: SOMA:Classifier (Classifier)

AnnotationAssertion(rdfs:label SOMA:Classifier "Classifier"@en)
SubClassOf(SOMA:Classifier SOMA:StatisticalReasoner)

# Class: SOMA:Client-Server_Specification (Client-Server Specification)

AnnotationAssertion(rdfs:comment SOMA:Client-Server_Specification "An API Secification that describes the well known Client-Server pattern:

The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"@en)
AnnotationAssertion(rdfs:label SOMA:Client-Server_Specification "Client-Server Specification"@en)
SubClassOf(SOMA:Client-Server_Specification SOMA:InterfaceSpecification)
SubClassOf(SOMA:Client-Server_Specification ObjectIntersectionOf(ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesRole> SOMA:ClientRole) ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesRole> SOMA:ServerRole)))

# Class: SOMA:ClientRole (Client role)

AnnotationAssertion(rdfs:comment SOMA:ClientRole "The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"@en)
AnnotationAssertion(rdfs:label SOMA:ClientRole "Client role"@en)
SubClassOf(SOMA:ClientRole SOMA:InterfaceComponentRole)
SubClassOf(SOMA:ClientRole ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDefinedIn> SOMA:Client-Server_Specification))

# Class: SOMA:CognitiveAgent (cognitive agent)

AnnotationAssertion(rdfs:comment SOMA:CognitiveAgent "An agent that is capable to act on its own, in contrast to sub-cognitive Agents, that need to have their intentionality bestowed upon some other agent."@en)
AnnotationAssertion(rdfs:label SOMA:CognitiveAgent "cognitive agent"@en)
SubClassOf(SOMA:CognitiveAgent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>)
DisjointClasses(SOMA:CognitiveAgent SOMA:SubCognitiveAgent)

# Class: SOMA:Computer_Language (Computer Language)

AnnotationAssertion(rdfs:comment SOMA:Computer_Language "A computer language is a formal language used in communication with a computer.

From Wikipedia: https://en.wikipedia.org/wiki/Computer_language"@en)
AnnotationAssertion(rdfs:label SOMA:Computer_Language "Computer Language"@en)
SubClassOf(SOMA:Computer_Language SOMA:FormalLanguage)

# Class: SOMA:Computer_Program (Computer program)

AnnotationAssertion(rdfs:comment SOMA:Computer_Program "The Program itself (the specific set of instruction in a Programming Language), not the file that it is contained in nor the implemented algorithm!"@en)
AnnotationAssertion(rdfs:label SOMA:Computer_Program "Computer program"@en)
EquivalentClasses(SOMA:Computer_Program ObjectIntersectionOf(SOMA:Structured_Text ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:Programming_Language)))
EquivalentClasses(SOMA:Computer_Program ObjectIntersectionOf(SOMA:Structured_Text ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#expresses> SOMA:Algorithm)))

# Class: SOMA:Database (SOMA:Database)

AnnotationAssertion(rdfs:comment SOMA:Database "A Database is a Software that organizes a collection of data stored and and allows for access, usually via some query engine.

Source: https://en.wikipedia.org/wiki/Database"@en)
SubClassOf(SOMA:Database SOMA:SoftwareRole)

# Class: SOMA:Digital_File (Computer File)

AnnotationAssertion(rdfs:comment SOMA:Digital_File "Any file that exists as a digital resource (but not its content), e.g., a text file actually laying on some hard drive, but not the contained text."@en)
AnnotationAssertion(rdfs:label SOMA:Digital_File "Computer File"@en)
AnnotationAssertion(rdfs:label SOMA:Digital_File "Digital File"@en)
SubClassOf(SOMA:Digital_File <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization>)
SubClassOf(Annotation(rdfs:comment "The file content."@en) SOMA:Digital_File ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#realizes> SOMA:Structured_Text))
SubClassOf(Annotation(rdfs:comment "The path of the file on a computer system."@en) SOMA:Digital_File DataSomeValuesFrom(SOMA:hasNameString xsd:string))

# Class: SOMA:ExecutableFile (Executable File)

AnnotationAssertion(rdfs:comment SOMA:ExecutableFile "An Executable File, sometimes simply referred to as an executable or binary, causes a computer \"to perform indicated tasks according to encoded instructions\", as opposed to a data file that must be interpreted (parsed) by a program to be meaningful.

The exact interpretation depends upon the use. \"Instructions\" is traditionally taken to mean machine code instructions for a physical CPU. In some contexts, a file containing scripting instructions (such as bytecode) may also be considered executable."@en)
AnnotationAssertion(rdfs:label SOMA:ExecutableFile "Executable File"@en)
EquivalentClasses(SOMA:ExecutableFile ObjectIntersectionOf(SOMA:Digital_File ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#realizes> SOMA:Executable_Code)))

# Class: SOMA:ExecutableFormat (Executable Format)

AnnotationAssertion(rdfs:comment SOMA:ExecutableFormat "An Executable Format is a File Format that allows computers to directly execute the content. Examples are MZ (DOS) or COFF."@en)
AnnotationAssertion(rdfs:label SOMA:ExecutableFormat "Executable Format"@en)
SubClassOf(SOMA:ExecutableFormat SOMA:File_format)
SubClassOf(SOMA:ExecutableFormat ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:Executable_Code))

# Class: SOMA:ExecutableSoftware (Executable Software)

AnnotationAssertion(rdfs:comment SOMA:ExecutableSoftware "Executable Software is Software that can directly be executed, in comparison to a Software Library, which might only contain functionality via interfaces, but offers no execution entry point."@en)
AnnotationAssertion(rdfs:label SOMA:ExecutableSoftware "Executable Software"@en)
EquivalentClasses(SOMA:ExecutableSoftware ObjectIntersectionOf(SOMA:Software ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasMember> SOMA:ExecutableFile)))

# Class: SOMA:Executable_Code (Executable Code)

AnnotationAssertion(rdfs:comment SOMA:Executable_Code "Executable Code is Code that when compiled / interpreted, has some clear entrance point and can be executed. Note the difference to an Executable File, which is the file that contains such (compiled) code."@en)
AnnotationAssertion(rdfs:label SOMA:Executable_Code "Executable Code"@en)
EquivalentClasses(SOMA:Executable_Code ObjectIntersectionOf(SOMA:Computer_Program ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:ExecutableFormat)))
SubClassOf(SOMA:Executable_Code SOMA:Computer_Program)

# Class: SOMA:FaultySoftware (Faulty software)

AnnotationAssertion(rdfs:comment SOMA:FaultySoftware "A description of a situation where some software has a bug.")
AnnotationAssertion(rdfs:label SOMA:FaultySoftware "Faulty software"@en)
SubClassOf(SOMA:FaultySoftware SOMA:SoftwareDiagnosis)

# Class: SOMA:FileConfiguration (File Configuration)

AnnotationAssertion(rdfs:comment SOMA:FileConfiguration "A configuration whose members are all files. Used to model, e.g., concrete collections of zip- and jar-files (and so on)."@en)
AnnotationAssertion(rdfs:label SOMA:FileConfiguration "File Configuration"@en)
EquivalentClasses(SOMA:FileConfiguration ObjectIntersectionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Configuration> ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasMember> SOMA:Digital_File)))

# Class: SOMA:File_format (File Format)

AnnotationAssertion(rdfs:comment SOMA:File_format "A File Format is a standard way that information is encoded for storage in a computer file. It specifies how bits are used to encode information in a digital storage medium.

From Wikipedia: https://en.wikipedia.org/wiki/File_format"@en)
AnnotationAssertion(rdfs:label SOMA:File_format "File Format"@en)
SubClassOf(SOMA:File_format SOMA:Computer_Language)

# Class: SOMA:FormalLanguage (Formal Language)

AnnotationAssertion(rdfs:comment SOMA:FormalLanguage "A Formal Language consists of words whose letters are taken from an alphabet and are well-formed according to a specific set of rules.

From Wikipedia: https://en.wikipedia.org/wiki/Formal_language"@en)
AnnotationAssertion(rdfs:label SOMA:FormalLanguage "Formal Language"@en)
SubClassOf(SOMA:FormalLanguage SOMA:Language)
SubClassOf(SOMA:FormalLanguage ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:Structured_Text))

# Class: SOMA:GraphDatabase (Graph database)

AnnotationAssertion(rdfs:comment SOMA:GraphDatabase "A Graph Database is a Database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data."@en)
AnnotationAssertion(rdfs:label SOMA:GraphDatabase "Graph database"@en)
SubClassOf(SOMA:GraphDatabase SOMA:Database)

# Class: SOMA:GraphQueryLanguage (Graph query language)

AnnotationAssertion(rdfs:comment SOMA:GraphQueryLanguage "A Query Language that is designed for communication with some Graph Database."@en)
AnnotationAssertion(rdfs:label SOMA:GraphQueryLanguage "Graph query language"@en)
SubClassOf(SOMA:GraphQueryLanguage SOMA:QueryLanguage)

# Class: SOMA:HostRole (Host role)

AnnotationAssertion(rdfs:comment SOMA:HostRole "In the Plug-in-Host pattern, a Host application provides services which the Plug-in can use, including a way for Plug-ins to register themselves with the Host application and a protocol for the exchange of data withPplug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.

Source: https://en.wikipedia.org/wiki/Plug-in_(computing)"@en)
AnnotationAssertion(rdfs:label SOMA:HostRole "Host role"@en)
SubClassOf(SOMA:HostRole SOMA:InterfaceComponentRole)
SubClassOf(SOMA:HostRole ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDefinedIn> SOMA:PluginSpecification))

# Class: SOMA:Human-readable_Programming_Language (Human-readable Programming Language)

AnnotationAssertion(rdfs:comment SOMA:Human-readable_Programming_Language "A Programming language like Java, Python etc. but not binary machine code."@en)
AnnotationAssertion(rdfs:label SOMA:Human-readable_Programming_Language "Human-readable Programming Language"@en)
SubClassOf(SOMA:Human-readable_Programming_Language SOMA:Programming_Language)
SubClassOf(SOMA:Human-readable_Programming_Language ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:Source_Code))

# Class: SOMA:IncompatibleSoftware (Incompatible software)

AnnotationAssertion(rdfs:comment SOMA:IncompatibleSoftware "A description of a situation where two software systems are incompatible with each other.")
AnnotationAssertion(rdfs:label SOMA:IncompatibleSoftware "Incompatible software"@en)
SubClassOf(SOMA:IncompatibleSoftware SOMA:SoftwareDiagnosis)

# Class: SOMA:InterfaceComponentRole (Interface component role)

AnnotationAssertion(rdfs:label SOMA:InterfaceComponentRole "Interface component role"@en)
EquivalentClasses(SOMA:InterfaceComponentRole ObjectIntersectionOf(SOMA:SoftwareRole ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDefinedIn> SOMA:InterfaceSpecification)))
SubClassOf(SOMA:InterfaceComponentRole SOMA:SoftwareRole)

# Class: SOMA:InterfaceSpecification (Interface Specification)

AnnotationAssertion(rdfs:comment SOMA:InterfaceSpecification "The Specification of an Interface between software, computer hardware, peripheral devices, humans and combinations of these.

Source: https://en.wikipedia.org/wiki/Interface_(computing)"@en)
AnnotationAssertion(rdfs:label SOMA:InterfaceSpecification "Interface Specification"@en)
SubClassOf(SOMA:InterfaceSpecification <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Design>)

# Class: SOMA:KnowledgeRepresentationLanguage (Knowledge Representation Language)

AnnotationAssertion(rdfs:comment SOMA:KnowledgeRepresentationLanguage "A Knowledge Representation Language is a Language with fixed semantics and syntax to describe some knowledge. Examples are JSON and the different OWL Profiles."@en)
AnnotationAssertion(rdfs:label SOMA:KnowledgeRepresentationLanguage "Knowledge Representation Language"@en)
SubClassOf(SOMA:KnowledgeRepresentationLanguage SOMA:Computer_Language)

# Class: SOMA:Language (Language)

AnnotationAssertion(rdfs:comment SOMA:Language "A Language is a structured System for communication.

From Wikipedia: https://en.wikipedia.org/wiki/Language"@en)
AnnotationAssertion(rdfs:label SOMA:Language "Language"@en)
SubClassOf(SOMA:Language SOMA:System)
SubClassOf(SOMA:Language ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:Text))

# Class: SOMA:Markup_Language (Markup Language)

AnnotationAssertion(rdfs:comment SOMA:Markup_Language "Markup refers to data included in an electronic document which is distinct from the document's content in that it is typically not included in representations of the document for end users, for example on paper or a computer screen, or in an audio stream. Markup is often used to control the display of the document or to enrich its content to facilitate automated processing. A markup language is a set of rules governing what markup information may be included in a document and how it is combined with the content of the document in a way to facilitate use by humans and computer programs.

From Wikipedia: https://en.wikipedia.org/wiki/Markup_language"@en)
AnnotationAssertion(rdfs:label SOMA:Markup_Language "Markup Language"@en)
SubClassOf(SOMA:Markup_Language SOMA:Computer_Language)

# Class: SOMA:Natural_Language (Natural Language)

AnnotationAssertion(rdfs:comment SOMA:Natural_Language "A Natural Language is any language that has evolved naturally in humans through use and repetition without conscious planning or premeditation.

From Wikipedia: https://en.wikipedia.org/wiki/Natural_language"@en)
AnnotationAssertion(rdfs:label SOMA:Natural_Language "Natural Language"@en)
SubClassOf(SOMA:Natural_Language SOMA:Language)
SubClassOf(SOMA:Natural_Language ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:Natural_Language_Text))

# Class: SOMA:Natural_Language_Text (Natural language text)

AnnotationAssertion(rdfs:comment SOMA:Natural_Language_Text "A Text in a Natural Language."@en)
AnnotationAssertion(rdfs:label SOMA:Natural_Language_Text "Natural language text"@en)
EquivalentClasses(SOMA:Natural_Language_Text ObjectIntersectionOf(SOMA:Text ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:Natural_Language)))

# Class: SOMA:Ontology (SOMA:Ontology)

AnnotationAssertion(rdfs:comment SOMA:Ontology "An ontology encompasses a representation, formal naming, and definition of the categories, properties, and relations between the concepts, data, and entities that substantiate one, many, or all domains of discourse. More simply, an ontology is a way of showing the properties of a subject area and how they are related, by defining a set of concepts and categories that represent the subject.

From Wikipedia: https://en.wikipedia.org/wiki/Ontology_(information_science)"@en)
EquivalentClasses(SOMA:Ontology ObjectIntersectionOf(SOMA:Structured_Text ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:Ontology_Language)))
SubClassOf(SOMA:Ontology SOMA:Structured_Text)

# Class: SOMA:Ontology_Language (Ontology Language)

AnnotationAssertion(rdfs:comment SOMA:Ontology_Language "An Ontology Language is a Knowledge Representation Language to describe knowledge about properties of a subject area and how they are related, by defining a set of concepts and categories that represent the subject using logic. Examples are the different OWL Profiles.

Source: https://en.wikipedia.org/wiki/Ontology_(information_science)"@en)
AnnotationAssertion(rdfs:label SOMA:Ontology_Language "Ontology Language"@en)
SubClassOf(SOMA:Ontology_Language SOMA:KnowledgeRepresentationLanguage)
SubClassOf(SOMA:Ontology_Language ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:Ontology))

# Class: SOMA:PluginRole (Plugin role)

AnnotationAssertion(rdfs:comment SOMA:PluginRole "In the Plug-in-Host pattern, a Host application provides services which the Plug-in can use, including a way for Plug-ins to register themselves with the Host application and a protocol for the exchange of data withPplug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.

Source: https://en.wikipedia.org/wiki/Plug-in_(computing)"@en)
AnnotationAssertion(rdfs:label SOMA:PluginRole "Plugin role"@en)
SubClassOf(SOMA:PluginRole SOMA:InterfaceComponentRole)
SubClassOf(SOMA:PluginRole ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDefinedIn> SOMA:PluginSpecification))

# Class: SOMA:PluginSpecification (Plugin Specification)

AnnotationAssertion(rdfs:comment SOMA:PluginSpecification "The Specification of a Plugin interface defines how a Host and a Plug-in function together and exchange information."@en)
AnnotationAssertion(rdfs:label SOMA:PluginSpecification "Plugin Specification"@en)
SubClassOf(SOMA:PluginSpecification SOMA:API_Specification)
SubClassOf(SOMA:PluginSpecification ObjectIntersectionOf(ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesRole> SOMA:HostRole) ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesRole> SOMA:PluginRole)))

# Class: SOMA:Programming_Language (Programming language)

AnnotationAssertion(rdfs:comment SOMA:Programming_Language "Any Programming Language, including both human-readable like Java and non-human-readable languages like binary machine code."@en)
AnnotationAssertion(rdfs:label SOMA:Programming_Language "Programming language"@en)
SubClassOf(SOMA:Programming_Language SOMA:Computer_Language)
SubClassOf(SOMA:Programming_Language ObjectAllValuesFrom(SOMA:givesMeaningTo SOMA:Computer_Program))

# Class: SOMA:QueryEngine (Query engine)

AnnotationAssertion(rdfs:comment SOMA:QueryEngine "A Query Engine is a Software that can answer some queries."@en)
AnnotationAssertion(rdfs:label SOMA:QueryEngine "Query engine"@en)
SubClassOf(SOMA:QueryEngine SOMA:SoftwareRole)

# Class: SOMA:QueryLanguage (Query language)

AnnotationAssertion(rdfs:comment SOMA:QueryLanguage "Query languages, are Computer languages used to make queries in databases and information systems (Source: https://en.wikipedia.org/wiki/Query_language).

Note that despite their name, Query languages typically come with syntax and semantic to not only ask for information, but also provide them, e.g., via SQL Update. In that sense, the term \"query\" from above refers to any formal object of information exchange with a database."@en)
AnnotationAssertion(rdfs:label SOMA:QueryLanguage "Query language"@en)
SubClassOf(SOMA:QueryLanguage SOMA:Computer_Language)

# Class: SOMA:Reasoner (SOMA:Reasoner)

AnnotationAssertion(rdfs:comment SOMA:Reasoner "A Reasoner is some Software that can infer new, implicit knowlegde from explicitly stated knowledge.

This definition is broad and we consider any System fitting the above description as reasoners. For example, the following can be seen as Reasoners:
* A simulation, where the explicit knowledge corresponds to the initial situation, and the implicit knowlegde corresponds to the situation that is derived from that by simulating some unfolding processes.
* A machine learning algorithm, e.g., an image classifier: The explicit knowledge is the visual content of a picture (even down to the pixel), the implicit knowledge is the derived classification.
* A logic based rule engine, where initial facts are the explicit knowledge, and derived facts are the implicit knowledge."@en)
SubClassOf(SOMA:Reasoner SOMA:SoftwareRole)

# Class: SOMA:RelationalDatabase (Relational database)

AnnotationAssertion(rdfs:comment SOMA:RelationalDatabase "A Relational Database is a Database based on the relational model of data, which organizes data into one or more tables (or \"relations\") of columns and rows, with a unique key identifying each row.

Source: https://en.wikipedia.org/wiki/Relational_database"@en)
AnnotationAssertion(rdfs:label SOMA:RelationalDatabase "Relational database"@en)
SubClassOf(SOMA:RelationalDatabase SOMA:Database)

# Class: SOMA:RelationalQueryLanguage (Relational query language)

AnnotationAssertion(rdfs:comment SOMA:RelationalQueryLanguage "A Query Language that is designed for communication with some Relational Database."@en)
AnnotationAssertion(rdfs:label SOMA:RelationalQueryLanguage "Relational query language"@en)
SubClassOf(SOMA:RelationalQueryLanguage SOMA:QueryLanguage)

# Class: SOMA:ServerRole (Server role)

AnnotationAssertion(rdfs:comment SOMA:ServerRole "The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"@en)
AnnotationAssertion(rdfs:label SOMA:ServerRole "Server role"@en)
SubClassOf(SOMA:ServerRole SOMA:InterfaceComponentRole)
SubClassOf(SOMA:ServerRole ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDefinedIn> SOMA:Client-Server_Specification))

# Class: SOMA:Simulation_Reasoner (Simulation-based reasoner)

AnnotationAssertion(rdfs:comment SOMA:Simulation_Reasoner "A Simulation-based Reasoner is a simulation that is used as a reasoner, where the explicit knowledge corresponds to the initial situation, and the implicit knowlegde corresponds to the situation that is derived from that by simulating some unfolding processes."@en)
AnnotationAssertion(rdfs:label SOMA:Simulation_Reasoner "Simulation-based reasoner"@en)
SubClassOf(SOMA:Simulation_Reasoner SOMA:Reasoner)

# Class: SOMA:Software (Software)

AnnotationAssertion(rdfs:label SOMA:Software "Software"@en)
AnnotationAssertion(rdfs:label SOMA:Software "We see Software as the Design of a DesignedTool: the running instance of said Software. Software as a design also follows the Function-Behaviour-Structure model:

The Function is the purpose or problem solving embodied by the Software Instance, e.g., sorting a list.

The Behaviour are the algoirthms used by the Software Instance, e.g., Bubble Sort.

The Structure is the organization of files, classes, objects and method calls of the program code."@en)
SubClassOf(SOMA:Software <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Design>)
SubClassOf(SOMA:Software ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes> SOMA:Software_Configuration))
SubClassOf(SOMA:Software ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes> ObjectUnionOf(SOMA:SoftwareInstance SOMA:Software_Configuration)))

# Class: SOMA:SoftwareInstance (Software instance)

AnnotationAssertion(rdfs:comment SOMA:SoftwareInstance "A Software instance is an entity to represent the agent that emerges from and while executing software: Some object, that can perform actions and communicate via some interfaces.
In this view, we see the of an Agent required intentionality its intentionality as bestowed upon the Software instance from the agents who started the program or gave an input (e.g., via a mouse click) to achieve some goal.

Another apporach might be to not model this entity at all and only see Execution of Software as a Process (see, e.g., https://en.wikipedia.org/wiki/Execution_(computing)). However, this would complicate modeling communication between running Software processes."@en)
AnnotationAssertion(rdfs:label SOMA:SoftwareInstance "Software instance"@en)
SubClassOf(SOMA:SoftwareInstance ObjectIntersectionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SocialAgent> ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#actsFor> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>)))
SubClassOf(SOMA:SoftwareInstance ObjectSomeValuesFrom(SOMA:isDesignedBy SOMA:Software))

# Class: SOMA:SoftwareLibrary (Software Library)

AnnotationAssertion(rdfs:label SOMA:SoftwareLibrary "Software Library"@en)
SubClassOf(SOMA:SoftwareLibrary SOMA:Software)

# Class: SOMA:SoftwareRole (Software role)

AnnotationAssertion(rdfs:comment SOMA:SoftwareRole "A Software Role is a Role applying to only Software and encoding the purpose of the Software: Its Role within Interface Patterns (e.g. Client vs. Server), its functionality (e.g. Database vs. Comnputer Game), and so on."@en)
AnnotationAssertion(rdfs:label SOMA:SoftwareRole "Software role"@en)
SubClassOf(SOMA:SoftwareRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)
SubClassOf(SOMA:SoftwareRole ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> SOMA:Software))

# Class: SOMA:Software_Configuration (Software Configuration)

AnnotationAssertion(rdfs:label SOMA:Software_Configuration "Software Configuration"@en)
AnnotationAssertion(rdfs:label SOMA:Software_Configuration "The part-whole relationship of Software and its components. Every Software has (at least 1) such configuration that exactly describes all Resources that make up the software (i.e., that are needed for the Software to function).
We support seperate views:
1. The Software Configuration describes all the necessary files, in which it should also be a File Configuration
2. It describes a Software Suit, e.g., 'Open Office' consists of Writer, Calc, Impress etc. Note that thus. Software can consist of other Software - this pattern may also be useful when describing Software Components, e.g., that some Software relies on a Database Software.
3. It describes not the files, but their content (the program code), which can also be seen as the part-whole relationship if one abstracts away from the files."@en)
SubClassOf(SOMA:Software_Configuration <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Configuration>)
SubClassOf(SOMA:Software_Configuration ObjectExactCardinality(1 <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDescribedBy> SOMA:Software))

# Class: SOMA:Source_Code (Source code)

AnnotationAssertion(rdfs:comment SOMA:Source_Code "The Source Code itself (the specific set of instruction in a human-readable Programming Language), not the file that it is contained in nor the implemented algorithm!"@en)
AnnotationAssertion(rdfs:label SOMA:Source_Code "Source code"@en)
EquivalentClasses(SOMA:Source_Code ObjectIntersectionOf(SOMA:Computer_Program ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:Human-readable_Programming_Language)))
SubClassOf(SOMA:Source_Code SOMA:Computer_Program)

# Class: SOMA:StatisticalReasoner (Statistical reasoner)

AnnotationAssertion(rdfs:label SOMA:StatisticalReasoner "A Statistical Reasoner is a Reasoner that uses statistical or stochastical data to infer implicit information from explicit information. Examples are Hidden Markov Models and Neural Networks."@en)
AnnotationAssertion(rdfs:label SOMA:StatisticalReasoner "Statistical reasoner"@en)
SubClassOf(SOMA:StatisticalReasoner SOMA:Reasoner)

# Class: SOMA:Structured_Text (Structured text)

AnnotationAssertion(rdfs:comment SOMA:Structured_Text "Any Text that adheres to some rules that are in any way more specific than natural language and that cannot be made sense of without knowing said rules."@en)
AnnotationAssertion(rdfs:label SOMA:Structured_Text "Structured text"@en)
EquivalentClasses(SOMA:Structured_Text ObjectIntersectionOf(SOMA:Text ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:FormalLanguage)))

# Class: SOMA:SubCognitiveAgent (Sub-cognitive agent)

AnnotationAssertion(rdfs:comment SOMA:SubCognitiveAgent "An agent that is not capable to act on its own, i.e., that is reactive. Its intentionality needs to be bestowed upon from some other agent, that it acts for."@en)
AnnotationAssertion(rdfs:label SOMA:SubCognitiveAgent "Sub-cognitive agent"@en)
SubClassOf(SOMA:SubCognitiveAgent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>)

# Class: SOMA:SymbolicReasoner (Symbolic reasoner)

AnnotationAssertion(rdfs:comment SOMA:SymbolicReasoner "A Symbolic Reasoner, is a piece of software able to infer logical consequences from a set of asserted facts or axioms.

Source: https://en.wikipedia.org/wiki/Semantic_reasoner"@en)
AnnotationAssertion(rdfs:label SOMA:SymbolicReasoner "Symbolic reasoner"@en)
SubClassOf(SOMA:SymbolicReasoner SOMA:Reasoner)

# Class: SOMA:System (System)

AnnotationAssertion(rdfs:comment SOMA:System "A system is a group of interacting or interrelated elements that act according to a set of rules to form a unified whole.

From Wikipedia: https://en.wikipedia.org/wiki/System"@en)
AnnotationAssertion(rdfs:label SOMA:System "System"@en)
SubClassOf(SOMA:System <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#SocialObject>)

# Class: SOMA:Text (Text)

AnnotationAssertion(rdfs:comment SOMA:Text "Any Information Object defined using a Language that, when realized through a symbolic writing system, can be read and made sense of.

One may define Text as anything that can be made sense of, including e.g., Speech or Paintings.

However, the argument can be made that Speech or Paintings are not considered Text as they cannot be EXACTLY realized by a symbolic writing system: Speech may loose punctuation, Paintings their original appearance.
On the other hand, this might not be true as both could be encoded in a binary format that can be interpreted using a language (eg., mp3, png)."@en)
AnnotationAssertion(rdfs:label SOMA:Text "Text"@en)
EquivalentClasses(SOMA:Text ObjectIntersectionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject> ObjectSomeValuesFrom(SOMA:isGivenMeaningBy SOMA:Language)))

# Class: SOMA:Triplestore (Triplestore)

AnnotationAssertion(rdfs:comment SOMA:Triplestore "A Triplestore or RDF store is a purpose-built database for the storage and retrieval of triples through semantic queries."@en)
AnnotationAssertion(rdfs:label SOMA:Triplestore "Triplestore"@en)
SubClassOf(SOMA:Triplestore SOMA:GraphDatabase)

# Class: SOMA:UnavailableSoftware (Unavailable software)

AnnotationAssertion(rdfs:comment SOMA:UnavailableSoftware "A description of a situation where some software dependency is not available.")
AnnotationAssertion(rdfs:label SOMA:UnavailableSoftware "Unavailable software"@en)
SubClassOf(SOMA:UnavailableSoftware SOMA:SoftwareDiagnosis)

# Class: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent> (Agent)

AnnotationAssertion(rdfs:comment <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent> "Generally, agents are goal-directed entities that are able to monitor their environment to select and perform efficient means-ends actions that are available in a given situation to achieve an intended goal. Agency, therefore, implies the ability to perceive and to change the environment of the agent. Crucially, it also entails intentionality to represent the goal-state in the future, equifinal variability to be able to achieve the intended goal-state with different actions in different contexts, and rationality of actions in relation to their goal to produce the most efficient action available (Source: https://en.wikipedia.org/wiki/Agency_(psychology)).

While we follow this definition, we do so loosely: We do not require the intentionality to be sourced by the agent. E.g., a running computer program (see Software instance) can be seen as an actor and therefore participate in Actions, e.g. some Communication Action, while its intentionality has been bestowed upon it from the agents who started the program or gave an input (e.g., via a mouse click) to achieve some goal."@en)


)