Prefix(:=<http://www.ease-crc.org/ont/SOMA-SAY.owl#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(SOMA:=<http://www.ease-crc.org/ont/SOMA.owl#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.ease-crc.org/ont/SOMA-SAY.owl>
Import(<http://www.ease-crc.org/ont/SOMA-ACT.owl>)
Annotation(rdfs:comment "SOMA-SAY.owl defines concepts related to natural language processing and generation.

In particular, it defines concepts related to linguistic acts and structures of syntax and meaning.")

Declaration(Class(SOMA:CausedMotionTheory))
Declaration(Class(SOMA:ClausalObject))
Declaration(Class(SOMA:ContainmentTheory))
Declaration(Class(SOMA:ControlTheory))
Declaration(Class(SOMA:CoverageTheory))
Declaration(Class(SOMA:CoveringTheory))
Declaration(Class(SOMA:CrackingTheory))
Declaration(Class(SOMA:DeclarativeClause))
Declaration(Class(SOMA:ESTSchemaTheory))
Declaration(Class(SOMA:ExecutableSchematicTheory))
Declaration(Class(SOMA:FunctionalSpatialSchemaTheory))
Declaration(Class(SOMA:ImageSchemaTheory))
Declaration(Class(SOMA:ImperativeClause))
Declaration(Class(SOMA:Instrument))
Declaration(Class(SOMA:InterrogativeClause))
Declaration(Class(SOMA:LinguisticObject))
Declaration(Class(SOMA:LocutionaryAction))
Declaration(Class(SOMA:MixingTheory))
Declaration(Class(SOMA:Patient))
Declaration(Class(SOMA:Phrase))
Declaration(Class(SOMA:PlacingTheory))
Declaration(Class(SOMA:ProximalTheory))
Declaration(Class(SOMA:Scene))
Declaration(Class(SOMA:SchematicTheory))
Declaration(Class(SOMA:SourcePathGoalTheory))
Declaration(Class(SOMA:State))
Declaration(Class(SOMA:StateTransition))
Declaration(Class(SOMA:SupportTheory))
Declaration(ObjectProperty(SOMA:coversObject))
Declaration(ObjectProperty(SOMA:interactsWith))
Declaration(ObjectProperty(SOMA:isAnsweredBy))
Declaration(ObjectProperty(SOMA:isCoveredByObject))
Declaration(ObjectProperty(SOMA:isMovedByAgent))
Declaration(ObjectProperty(SOMA:movesObject))

############################
#   Object Properties
############################

# Object Property: SOMA:coversObject (SOMA:coversObject)

AnnotationAssertion(rdfs:comment SOMA:coversObject "A relationship from an object (the coverer) that blocks access to another or its interior (the coveree).")
SubObjectPropertyOf(SOMA:coversObject SOMA:interactsWith)
InverseObjectProperties(SOMA:coversObject SOMA:isCoveredByObject)
AsymmetricObjectProperty(SOMA:coversObject)
IrreflexiveObjectProperty(SOMA:coversObject)
ObjectPropertyDomain(SOMA:coversObject <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)
ObjectPropertyRange(SOMA:coversObject <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)

# Object Property: SOMA:isAnsweredBy (is answered by)

AnnotationAssertion(rdfs:comment SOMA:isAnsweredBy "A relation from a Query to an Agent who answers it.")
AnnotationAssertion(rdfs:label SOMA:isAnsweredBy "is answered by")
SubObjectPropertyOf(SOMA:isAnsweredBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#involvesAgent>)
ObjectPropertyDomain(SOMA:isAnsweredBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:isAnsweredBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>)

# Object Property: SOMA:isCoveredByObject (SOMA:isCoveredByObject)

AnnotationAssertion(rdfs:comment SOMA:isCoveredByObject "A relation from an object (the coveree) which is itself, or has its interior, prevented from being accessed from outside by a coverer.")
SubObjectPropertyOf(SOMA:isCoveredByObject SOMA:interactsWith)
AsymmetricObjectProperty(SOMA:isCoveredByObject)
IrreflexiveObjectProperty(SOMA:isCoveredByObject)
ObjectPropertyDomain(SOMA:isCoveredByObject <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)
ObjectPropertyRange(SOMA:isCoveredByObject <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)

# Object Property: SOMA:isMovedByAgent (SOMA:isMovedByAgent)

AnnotationAssertion(rdfs:comment SOMA:isMovedByAgent "A relation from an object to an agent who causes it to move.")
SubObjectPropertyOf(SOMA:isMovedByAgent SOMA:interactsWith)
InverseObjectProperties(SOMA:isMovedByAgent SOMA:movesObject)
ObjectPropertyDomain(SOMA:isMovedByAgent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)
ObjectPropertyRange(SOMA:isMovedByAgent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>)

# Object Property: SOMA:movesObject (SOMA:movesObject)

AnnotationAssertion(rdfs:comment SOMA:movesObject "A relation from an agent to an object that the agent causes to move.")
SubObjectPropertyOf(SOMA:movesObject SOMA:interactsWith)
ObjectPropertyDomain(SOMA:movesObject <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>)
ObjectPropertyRange(SOMA:movesObject <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)



############################
#   Classes
############################

# Class: SOMA:AssertionTask (Assertion task)

SubClassOf(SOMA:AssertionTask ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant> SOMA:DeclarativeClause)))

# Class: SOMA:CausedMotionTheory (Caused motion theory)

AnnotationAssertion(rdfs:comment SOMA:CausedMotionTheory "A schematic theory describing a situation in which an agent performs an action which causes an object to move along a certain path. A popular example being \"He sneezed the napkin off the table.\" (Goldberg 1995)

Let xA, xP be objects filling the agent, patient roles of this schema. Then one can infer that xA movesObject xP.")
AnnotationAssertion(rdfs:label SOMA:CausedMotionTheory "Caused motion theory"@en)
SubClassOf(SOMA:CausedMotionTheory SOMA:ImageSchemaTheory)
SubClassOf(SOMA:CausedMotionTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:CausalEventRole))
SubClassOf(SOMA:CausedMotionTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Instrument))
SubClassOf(SOMA:CausedMotionTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Patient))
SubClassOf(SOMA:CausedMotionTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:PerformerRole))
SubClassOf(SOMA:CausedMotionTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart> SOMA:SourcePathGoalTheory))

# Class: SOMA:ClausalObject (Clausal object)

AnnotationAssertion(rdfs:comment SOMA:ClausalObject "A clause is a phrase containing a subject and a predicate.")
AnnotationAssertion(rdfs:label SOMA:ClausalObject "Clausal object")
SubClassOf(SOMA:ClausalObject SOMA:Phrase)

# Class: SOMA:CommandingTask (Commanding task)

SubClassOf(SOMA:CommandingTask ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant> SOMA:ImperativeClause)))

# Class: SOMA:ContainmentTheory (Containment theory)

AnnotationAssertion(rdfs:comment SOMA:ContainmentTheory "A schematic theory that describes a functional relation which ensures that the location of some entity, the locatum, is constrained to be within some region which is the interior of some other entity, the relatum.

This is also known as FunctionalControlInternal in GUM-4-space (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL isInsideOf xR.")
AnnotationAssertion(rdfs:label SOMA:ContainmentTheory "Containment theory"@en)
SubClassOf(SOMA:ContainmentTheory SOMA:ControlTheory)

# Class: SOMA:ControlTheory (Control theory)

AnnotationAssertion(rdfs:comment SOMA:ControlTheory "A description of functional-spatial configurations where one object controls another object's position in space, e.g. if a pot moves, then the popcorn contained therein moves, as well. Note that the objects do not need to be in direct contact.

Adopted from GUM-4-space (Bateman et al. 2010).")
AnnotationAssertion(rdfs:label SOMA:ControlTheory "Control theory"@en)
SubClassOf(SOMA:ControlTheory SOMA:FunctionalSpatialSchemaTheory)

# Class: SOMA:CoverageTheory (SOMA:CoverageTheory)

AnnotationAssertion(rdfs:comment SOMA:CoverageTheory "A schematic theory of a functional relation between two objects such that one of them, the locatum, blocks access to the interior of the relatum.

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL coversObject xR.")
SubClassOf(SOMA:CoverageTheory SOMA:FunctionalSpatialSchemaTheory)

# Class: SOMA:CoveringTheory (Covering theory)

AnnotationAssertion(rdfs:comment SOMA:CoveringTheory "A schematic theory of how an agent can use an instrument to prevent access to the interior of a patient.")
AnnotationAssertion(rdfs:label SOMA:CoveringTheory "Covering theory"@en)
SubClassOf(SOMA:CoveringTheory SOMA:ExecutableSchematicTheory)
SubClassOf(SOMA:CoveringTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Instrument))
SubClassOf(SOMA:CoveringTheory ObjectExactCardinality(1 <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Patient))

# Class: SOMA:CrackingTheory (Cracking theory)

AnnotationAssertion(rdfs:comment SOMA:CrackingTheory "A schematic theory of how an agent can inflict damage to the surface of an object.")
AnnotationAssertion(rdfs:label SOMA:CrackingTheory "Cracking theory"@en)
SubClassOf(SOMA:CrackingTheory SOMA:ExecutableSchematicTheory)
SubClassOf(SOMA:CrackingTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Instrument))
SubClassOf(SOMA:CrackingTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Patient))

# Class: SOMA:DeclarativeClause (Declarative clause)

AnnotationAssertion(rdfs:comment SOMA:DeclarativeClause "A clause which makes an assertion or declaration.")
AnnotationAssertion(rdfs:label SOMA:DeclarativeClause "Declarative clause")
SubClassOf(SOMA:DeclarativeClause SOMA:ClausalObject)

# Class: SOMA:ESTSchemaTheory (EST schema theory)

AnnotationAssertion(rdfs:comment SOMA:ESTSchemaTheory "A schematic theory that describes the existence of an entity.

Developmental psychology posits that \"object permanence\" (the assumption that physical objects keep existing even when the agent doesn't perceive them, which consequently informs reasoning about where an object should be, even when perception of it is lost) is a cognitive ability that is not, at least in the very young human child, immediately manifest. Rather, it seems learned via interaction, and usually is among an infant's cognitive repertoire by age 2.

In SOMA, we represent this ability of a cognitive agent as an ability to generate and maintain ESTSchemaTheories. Each instance of such a theory refers to one particular physical object, the one that the instance of the ESTSchemaTheory asserts to exist.

Because each instance of an ESTSchemaTheory refers to a single object, ESTSchemaTheories are not associated to any relation between OWL individuals.")
AnnotationAssertion(rdfs:label SOMA:ESTSchemaTheory "EST schema theory"@en)
SubClassOf(SOMA:ESTSchemaTheory SOMA:ImageSchemaTheory)
SubClassOf(SOMA:ESTSchemaTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:ExistingObjectRole))
SubClassOf(SOMA:ESTSchemaTheory ObjectExactCardinality(1 <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines>))

# Class: SOMA:ExecutableSchematicTheory (Executable schematic theory)

AnnotationAssertion(rdfs:comment SOMA:ExecutableSchematicTheory "Also known as \"executing schemas\" or \"x-schemas\", these were defined by Bergen and Chang in their work \"Embodied Construction Grammar in Simulation-Based Language Understanding\" as:

\"Executing schemas, or x-schemas, are dynamic representations motivated in part by motor and perceptual systems (Bailey 1997; Narayanan 1997), on the assumption that the same underlying representations used for executing and perceiving an action are brought to bear in understanding language about that action. The x-schema formalism is an extension of Petri nets (Murata 1989) that can model sequential, concurrent, and
asynchronous events\"

SOMA does not restrict the formalism of ExecutableSchematicTheories; i.e. they don't have to be Petri Nets.

They maintain their role however as representations able to drive a simulation, at some level of abstraction, of an embodied action. This level of abstraction may be still fairly underspecified as in the case of the original x-schemas and as such not a plan that an agent could run in an actual physical environment without further information.")
AnnotationAssertion(rdfs:label SOMA:ExecutableSchematicTheory "Executable schematic theory"@en)
SubClassOf(SOMA:ExecutableSchematicTheory SOMA:SchematicTheory)
SubClassOf(SOMA:ExecutableSchematicTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:PerformerRole))

# Class: SOMA:FunctionalSpatialSchemaTheory (Functional spatial schema theory)

AnnotationAssertion(rdfs:comment SOMA:FunctionalSpatialSchemaTheory "The superclass for theories describing functional spatial relations.

Adopted from GUM-4-space (Bateman et al. 2010).")
AnnotationAssertion(rdfs:label SOMA:FunctionalSpatialSchemaTheory "Functional spatial schema theory"@en)
SubClassOf(SOMA:FunctionalSpatialSchemaTheory SOMA:ImageSchemaTheory)
SubClassOf(SOMA:FunctionalSpatialSchemaTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:LocatumRole))
SubClassOf(SOMA:FunctionalSpatialSchemaTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:RelatumRole))

# Class: SOMA:ImageSchemaTheory (Image schema theory)

AnnotationAssertion(rdfs:comment SOMA:ImageSchemaTheory "A theory that describes an image-schematic relationship between some entities.

Image schemas are considered as fundamental, pre-conceptual, building blocks of cognition. They were introduced to characterize how human beings are believed to organize and make sense of experience.

For SOMA, whereas the focus of executable schematic theories is to describe how an agent might act, image schematic theories focus on descriptions of how objects behave in the absence of, or after, an active intervention from an agent.")
AnnotationAssertion(rdfs:label SOMA:ImageSchemaTheory "Image schema theory"@en)
SubClassOf(SOMA:ImageSchemaTheory SOMA:SchematicTheory)

# Class: SOMA:ImperativeClause (Imperative clause)

AnnotationAssertion(rdfs:comment SOMA:ImperativeClause "A clause which commands some agent to perform a task or bring about a state of affairs.")
AnnotationAssertion(rdfs:label SOMA:ImperativeClause "Imperative clause")
SubClassOf(SOMA:ImperativeClause SOMA:ClausalObject)
SubClassOf(SOMA:ImperativeClause ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#expresses> SOMA:StateTransition))
SubClassOf(SOMA:ImperativeClause ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#expresses> SOMA:StateTransition))

# Class: SOMA:InterrogativeClause (Interrogative clause)

AnnotationAssertion(rdfs:comment SOMA:InterrogativeClause "A clause which makes a request, typically information, of some agent.

Note that in a semantic sense such clauses always request information, but in a pragmatic sense they can be used to convey commands or requests for action, such as e.g. \"can you close the door?\" The question is not just a request for information about ability, but a request to perform a task.")
AnnotationAssertion(rdfs:label SOMA:InterrogativeClause "Interrogative clause")
SubClassOf(SOMA:InterrogativeClause SOMA:ClausalObject)

# Class: SOMA:LinguisticObject (Linguistic object)

AnnotationAssertion(rdfs:isDefinedBy SOMA:LinguisticObject <http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl>)

# Class: SOMA:LocutionaryAction (Locutionary action)

AnnotationAssertion(rdfs:comment SOMA:LocutionaryAction "A Locutionary Act is the performance of an utterance (source: https://en.wikipedia.org/wiki/Locutionary_act).

We additionally require a Locutionary Act to be performed by an Agent, not an Actor - this is what sets it apart from a Communication Action."@en)
AnnotationAssertion(rdfs:label SOMA:LocutionaryAction "Locutionary action"@en)
EquivalentClasses(SOMA:LocutionaryAction ObjectIntersectionOf(SOMA:CommunicationAction ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>)))

# Class: SOMA:MixingTheory (Mixing theory)

AnnotationAssertion(rdfs:comment SOMA:MixingTheory "A schematic theory about how an agent can mix a fluid or particulate object.")
AnnotationAssertion(rdfs:label SOMA:MixingTheory "Mixing theory"@en)
SubClassOf(SOMA:MixingTheory SOMA:ExecutableSchematicTheory)
SubClassOf(SOMA:MixingTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Instrument))
SubClassOf(SOMA:MixingTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Patient))

# Class: SOMA:Phrase (SOMA:Phrase)

AnnotationAssertion(rdfs:isDefinedBy SOMA:Phrase <http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl>)
SubClassOf(SOMA:Phrase SOMA:LinguisticObject)

# Class: SOMA:PlacingTheory (Placing theory)

AnnotationAssertion(rdfs:comment SOMA:PlacingTheory "A schematic theory of how an agent can place a patient at a particular goal location.")
AnnotationAssertion(rdfs:label SOMA:PlacingTheory "Placing theory"@en)
SubClassOf(SOMA:PlacingTheory SOMA:ExecutableSchematicTheory)
SubClassOf(SOMA:PlacingTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Destination))
SubClassOf(SOMA:PlacingTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Patient))

# Class: SOMA:ProximalTheory (Proximal theory)

AnnotationAssertion(rdfs:comment SOMA:ProximalTheory "An image schematic theory that describes a qualitative spatial relation indicating relative proximity, as expressed by the prepositions 'near', 'close to', 'next to', etc.

It may seem that proximity is a very simple notion, requiring no sophisticated theoretical underpinnings. However, proximity is an extremely object- and purpose-dependent relation. A store next door is in a closeness relation to a person, and so is the Sun in the sky, despite the physical distances being different by several orders of magnitude.

As such, a theory, i.e. a description of what a particular kind of closeness means and in which contexts it applies, is necessary.

Adopted from GUM-4-space (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL 'near to' xR.")
AnnotationAssertion(rdfs:label SOMA:ProximalTheory "Proximal theory"@en)
SubClassOf(SOMA:ProximalTheory SOMA:ImageSchemaTheory)
SubClassOf(SOMA:ProximalTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:LocatumRole))
SubClassOf(SOMA:ProximalTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:RelatumRole))

# Class: SOMA:QueryingTask (Querying task)

SubClassOf(SOMA:QueryingTask ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant> SOMA:InterrogativeClause)))

# Class: SOMA:Scene (SOMA:Scene)

AnnotationAssertion(rdfs:comment SOMA:Scene "Scenes are Situations which interpret a State in terms of its conformance to some qualitative, image schematic description. I.e., the scene is described in terms of qualitative functional and spatial relations existing between participating objects.")
SubClassOf(SOMA:Scene <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)
SubClassOf(SOMA:Scene ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#includesEvent> SOMA:State))
SubClassOf(SOMA:Scene ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#satisfies> SOMA:ImageSchemaTheory))

# Class: SOMA:SchematicTheory (Schematic theory)

AnnotationAssertion(rdfs:comment SOMA:SchematicTheory "A theory used to describe, analyze, and reason with the meaning of a linguistic message.

Note that such theories are useful both when analyzing an actual linguistic production, and when creating a linguistic production to describe some observed experience.")
AnnotationAssertion(rdfs:label SOMA:SchematicTheory "Schematic theory"@en)
SubClassOf(SOMA:SchematicTheory <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Theory>)

# Class: SOMA:SourcePathGoalTheory (Source-path-goal theory)

AnnotationAssertion(rdfs:comment SOMA:SourcePathGoalTheory "A very general image-schema of the Path family, this schema describes movement along a path from a source towards a goal.

Note: in cognitive linguistics literature, the roles of this schema are Source, Path, Goal. However, to avoid overloading some other terminology in SOMA, we renamed Source to Origin and Goal to Destination.

As yet, this schema is not associated to any object property.")
AnnotationAssertion(rdfs:label SOMA:SourcePathGoalTheory "Source-path-goal theory"@en)
SubClassOf(SOMA:SourcePathGoalTheory SOMA:ImageSchemaTheory)
SubClassOf(SOMA:SourcePathGoalTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Destination))
SubClassOf(SOMA:SourcePathGoalTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:Origin))
SubClassOf(SOMA:SourcePathGoalTheory ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines> SOMA:PathRole))

# Class: SOMA:StateTransition (State transition)

AnnotationAssertion(rdfs:comment SOMA:StateTransition "A transition between two states brought about by the Action of some Agent.")
AnnotationAssertion(rdfs:label SOMA:StateTransition "State transition"@en)
SubClassOf(SOMA:StateTransition <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition>)
SubClassOf(SOMA:StateTransition ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#includesEvent> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Action>))
SubClassOf(SOMA:StateTransition ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#satisfies> SOMA:ImageSchemaTheory))

# Class: SOMA:SupportTheory (Support theory)

AnnotationAssertion(rdfs:comment SOMA:SupportTheory "An image schematic theory that describes the reified functional relation holding between two spatial objects x and y, such that x physically supports y in the presence of gravity; x and y need not be in contact. An example of such an expression is \"The bowl is on the table\".

This is also known as FunctionalControlExternal in GUM (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL isSupportedBy xR.")
AnnotationAssertion(rdfs:label SOMA:SupportTheory "Support theory"@en)
SubClassOf(SOMA:SupportTheory SOMA:ControlTheory)


)