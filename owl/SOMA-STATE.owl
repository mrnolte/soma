Prefix(:=<http://www.ease-crc.org/ont/SOMA-STATE.owl#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(SOMA:=<http://www.ease-crc.org/ont/SOMA.owl#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.ease-crc.org/ont/SOMA-STATE.owl>
Import(<http://www.ease-crc.org/ont/SOMA-OBJ.owl>)
Import(<http://www.ease-crc.org/ont/SOMA.owl>)
Annotation(rdfs:comment "SOMA-STATE.owl defines knowledge related to \"States\", which are clasically defined as stative and homeomeric events.

Defines an upper level for a taxonomy of state types and roles that objects can play in states. State types relevant for the robotics domain are defined, such as FunctionalControl, Linkage, Blockage.

The need for \"state types\" (subclasses of Concept) to connect via dul:classifies to instances of State (itself a subclass of Event) comes from the core SOMA approach, which is to treat the detailed type of an Event as an interpretation of the Event rather than something intrinsic to the Event itself.

Note, the knowledge that states can be changed into other states should be defined in SOMA-ACT.owl, not here. SOMA-STATE.owl should not even indirectly import SOMA-ACT.owl.

This is related to a design decision as to which should be more fundamental, the state or the action. Or in other words, should states be defined (also) in terms of how they result from actions, or should actions be defined (also) in terms of how they connect between states?

These approaches seem equally expressive, we simply chose what felt more intuitive.")

Declaration(Class(:ContainmentState))
Declaration(Class(SOMA:Configuration))
Declaration(Class(SOMA:ConnectedObject))
Declaration(Class(SOMA:ContactState))
Declaration(Class(SOMA:Container))
Declaration(Class(SOMA:Containment))
Declaration(Class(SOMA:FunctionalControl))
Declaration(Class(SOMA:Item))
Declaration(Class(SOMA:LinkageState))
Declaration(Class(SOMA:LinkedObject))
Declaration(Class(SOMA:PhysicalAccessibility))
Declaration(Class(SOMA:PhysicalBlockage))
Declaration(Class(SOMA:PhysicalExistence))
Declaration(Class(SOMA:PhysicalState))
Declaration(Class(SOMA:Restrictor))
Declaration(Class(SOMA:SocialState))
Declaration(Class(SOMA:StateType))
Declaration(Class(SOMA:SupportState))
Declaration(Class(SOMA:Supporter))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>))
Declaration(ObjectProperty(SOMA:hasStateType))
Declaration(ObjectProperty(SOMA:isStateTypeOf))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesRole>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDescribedBy>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isRelatedToConcept>))

############################
#   Object Properties
############################

# Object Property: SOMA:hasStateType (has state type)

AnnotationAssertion(rdfs:comment SOMA:hasStateType "A relation between roles and state types, e.g. 'the chair is the supporter of the person sitting on it'.")
AnnotationAssertion(rdfs:label SOMA:hasStateType "has state type")
SubObjectPropertyOf(SOMA:hasStateType <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isRelatedToConcept>)
InverseObjectProperties(SOMA:hasStateType SOMA:isStateTypeOf)
ObjectPropertyDomain(SOMA:hasStateType <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)
ObjectPropertyRange(SOMA:hasStateType SOMA:StateType)

# Object Property: SOMA:isStateTypeOf (is state type of)

AnnotationAssertion(rdfs:comment SOMA:isStateTypeOf "A relation between roles and state types, e.g. 'the chair is the supporter of the person sitting on it'.")
AnnotationAssertion(rdfs:label SOMA:isStateTypeOf "is state type of")
SubObjectPropertyOf(SOMA:isStateTypeOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isRelatedToConcept>)
ObjectPropertyDomain(SOMA:isStateTypeOf SOMA:StateType)
ObjectPropertyRange(SOMA:isStateTypeOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)



############################
#   Classes
############################

# Class: :ContainmentState (Containment state)

AnnotationAssertion(rdfs:comment :ContainmentState "Classifies States in which an object is kept inside another object.")
AnnotationAssertion(rdfs:label :ContainmentState "Containment state"@en)
SubClassOf(:ContainmentState SOMA:FunctionalControl)
SubClassOf(:ContainmentState ObjectSomeValuesFrom(SOMA:isStateTypeOf ObjectIntersectionOf(SOMA:Container ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> ObjectSomeValuesFrom(SOMA:hasDisposition SOMA:Containment)))))

# Class: SOMA:Configuration (SOMA:Configuration)

AnnotationAssertion(rdfs:comment SOMA:Configuration "A description of a State. This includes e.g. what acceptable regions for participant objects of the State might look like.
A configuration of the world is construed to be stable on its own. Outside disturbances may cause state transitions, and the settling into some other, self-stable configuration.

Several other Description subclasses may function as Configurations. For example, a Goal is a description of a desired State. A Norm describes a State that should be maintained. A Diagnosis describes a State that causes certain symptoms etc.

Note a couple of issues here. First one relates to what \"configuration\" means; in particular, this doesn't mean a configuration that is unchanging according to any viewpoint. The analogy here is the \"macrostate\" from thermodynamics: a macrostate with two gases mixed does not mean all gas particles are motionless, but rather that the locations and movements of gas particles are such that any particle is likely to have as many neighbors of one type as the other.

The second issue relates to what is \"outside\". The state is a configuration of some, but not necessarily all, Entities in the world. Entities not in this configuration are outside of it.")
SubClassOf(SOMA:Configuration <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>)
SubClassOf(SOMA:Configuration ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes> SOMA:StateType))

# Class: SOMA:ContactState (Contact state)

AnnotationAssertion(rdfs:comment SOMA:ContactState "Classifies States in which some objects are in contact.")
AnnotationAssertion(rdfs:label SOMA:ContactState "Contact state"@en)
SubClassOf(SOMA:ContactState SOMA:StateType)
SubClassOf(SOMA:ContactState ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> ObjectMinCardinality(2 <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)))

# Class: SOMA:Containment (SOMA:Containment)

AnnotationAssertion(rdfs:comment SOMA:Containment "Classifies States in which an object is placed inside another.")

# Class: SOMA:FunctionalControl (Functional state)

AnnotationAssertion(rdfs:comment SOMA:FunctionalControl "Classifies States in which an object restricts the movement of another, at least partially. Usually neither object is construed to be an agent.

Note that this State focuses on how the interaction of, usually non-agentive, objects restricts their motion. This is in contrast to Blockage/Accessibility states where the placement of some objects influences the access to some of them by a third, usually agentive party.")
AnnotationAssertion(rdfs:label SOMA:FunctionalControl "Functional state"@en)
SubClassOf(SOMA:FunctionalControl SOMA:StateType)
SubClassOf(SOMA:FunctionalControl ObjectSomeValuesFrom(SOMA:isStateTypeOf SOMA:Item))
SubClassOf(SOMA:FunctionalControl ObjectSomeValuesFrom(SOMA:isStateTypeOf SOMA:Restrictor))

# Class: SOMA:LinkageState (Linkage state)

AnnotationAssertion(rdfs:comment SOMA:LinkageState "Classifies States in which two objects are in a rigid connection, such that the movement of one determines the movement of the other.")
AnnotationAssertion(rdfs:label SOMA:LinkageState "Linkage state"@en)
SubClassOf(SOMA:LinkageState SOMA:StateType)
SubClassOf(SOMA:LinkageState ObjectSomeValuesFrom(SOMA:isStateTypeOf SOMA:LinkedObject))

# Class: SOMA:PhysicalAccessibility (Physical accessibility)

AnnotationAssertion(rdfs:comment SOMA:PhysicalAccessibility "Classifies States in which an item is placed in a container or protected by a protector, but the placement of the item and container is such that a, usually agentive, accessor may nevertheless reach the item in order to perform a task.")
AnnotationAssertion(rdfs:label SOMA:PhysicalAccessibility "Physical accessibility"@en)
SubClassOf(SOMA:PhysicalAccessibility SOMA:StateType)
SubClassOf(SOMA:PhysicalAccessibility ObjectSomeValuesFrom(SOMA:isStateTypeOf SOMA:Item))
SubClassOf(SOMA:PhysicalAccessibility ObjectSomeValuesFrom(SOMA:isStateTypeOf SOMA:Restrictor))

# Class: SOMA:PhysicalBlockage (Physical blockage)

AnnotationAssertion(rdfs:comment SOMA:PhysicalBlockage "Classifies States in which an object, in general called restrictor, blocks access to an item. A usually agentive accessor, whose access is blocked, may be specified.")
AnnotationAssertion(rdfs:label SOMA:PhysicalBlockage "Physical blockage"@en)
SubClassOf(SOMA:PhysicalBlockage SOMA:StateType)
SubClassOf(SOMA:PhysicalBlockage ObjectSomeValuesFrom(SOMA:isStateTypeOf SOMA:Item))
SubClassOf(SOMA:PhysicalBlockage ObjectSomeValuesFrom(SOMA:isStateTypeOf SOMA:Restrictor))

# Class: SOMA:PhysicalExistence (Physical Existince)

AnnotationAssertion(rdfs:comment SOMA:PhysicalExistence "A State in which an Entity is said to exist in the physical world.")
AnnotationAssertion(rdfs:label SOMA:PhysicalExistence "Physical Existince"@en)
SubClassOf(SOMA:PhysicalExistence SOMA:PhysicalState)

# Class: SOMA:PhysicalState (Physical state)

AnnotationAssertion(rdfs:comment SOMA:PhysicalState "A State describing how Entities in the physical world relate to each other.")
AnnotationAssertion(rdfs:label SOMA:PhysicalState "Physical state")
SubClassOf(SOMA:PhysicalState SOMA:State)
SubClassOf(SOMA:PhysicalState ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>))

# Class: SOMA:SocialState (Social state)

AnnotationAssertion(rdfs:comment SOMA:SocialState "A State which describes how Agents relate to each other.

One can argue that any Social state is a Physical state, since anything the Agents may use to construct a social relationship is made of physical things. The difference is that the physical support of the social relationships is not important here, what matters instead is the nature and content of the social relations, regardless of how they are physically realized.")
AnnotationAssertion(rdfs:comment SOMA:SocialState "Note here a distinction: the Agents involved must be able to communicate. This is because while it is often assumed that an Agent has or aspires to have similar cognitive capacities to a human, This need not be the case; in particular, not all Agents need to maintain theories of mind about each other and therefore not all Agents need to communicate with each other. It is hard to see what sort of meaning Social concepts might have to such Agents, since Social concepts are all about shared constructions.

Note also that the DUL SocialAgent class is not an appropriate restriction however. SocialAgent is one that exists by agreement of PhysicalAgents. For example, a corporation or a nation are SocialAgents. An Agent with the capability to engage socially is not necessarily a DUL SocialAgent.")
AnnotationAssertion(rdfs:label SOMA:SocialState "Social state")
SubClassOf(SOMA:SocialState SOMA:State)
SubClassOf(SOMA:SocialState ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Agent>))

# Class: SOMA:StateType (State type)

AnnotationAssertion(rdfs:comment SOMA:StateType "An EventType that classifies States.")
AnnotationAssertion(rdfs:label SOMA:StateType "State type"@en)
SubClassOf(SOMA:StateType <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>)
SubClassOf(SOMA:StateType ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> SOMA:State))
SubClassOf(SOMA:StateType ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart> SOMA:StateType))

# Class: SOMA:SupportState (Support state)

AnnotationAssertion(rdfs:comment SOMA:SupportState "Classifies States in which an object is not able to move under gravity because of its placement relative to some other object.")
AnnotationAssertion(rdfs:label SOMA:SupportState "Support state"@en)
SubClassOf(SOMA:SupportState SOMA:FunctionalControl)
SubClassOf(SOMA:SupportState ObjectSomeValuesFrom(SOMA:isStateTypeOf ObjectIntersectionOf(SOMA:Supporter ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies> ObjectSomeValuesFrom(SOMA:hasDisposition SOMA:Deposition)))))


)