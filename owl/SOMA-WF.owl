Prefix(:=<http://www.ease-crc.org/ont/SOMA-WF.owl#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(SOMA:=<http://www.ease-crc.org/ont/SOMA.owl#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.ease-crc.org/ont/SOMA-WF.owl>
Import(<http://www.ease-crc.org/ont/DUL.owl>)
Import(<http://www.ease-crc.org/ont/SOMA-ACT.owl>)
Import(<http://www.ease-crc.org/ont/SOMA-STATE.owl>)
Import(<http://www.ease-crc.org/ont/SOMA.owl>)
Annotation(rdfs:comment "SOMA-WF.owl defines concepts and relations that make it possible to use an ABox to describe, in detail, how a workflow proceeds in terms of how instances of function calls connect to each other and how data objects are used as parameters or produced as results.")

Declaration(Class(SOMA:Binding))
Declaration(Class(SOMA:ConditionalSuccedence))
Declaration(Class(SOMA:CounterfactualBinding))
Declaration(Class(SOMA:FactualBinding))
Declaration(Class(SOMA:RoleFillerBinding))
Declaration(Class(SOMA:RoleRoleBinding))
Declaration(Class(SOMA:StatusFailure))
Declaration(Class(SOMA:Succedence))
Declaration(Class(SOMA:TaskInvocation))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Concept>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Relation>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>))
Declaration(Class(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>))
Declaration(ObjectProperty(:hasPreviousStep))
Declaration(ObjectProperty(:isFirstStepOf))
Declaration(ObjectProperty(:isStepOf))
Declaration(ObjectProperty(SOMA:definesInput))
Declaration(ObjectProperty(SOMA:definesOutput))
Declaration(ObjectProperty(SOMA:definesParticipant))
Declaration(ObjectProperty(SOMA:hasBinding))
Declaration(ObjectProperty(SOMA:hasBindingFiller))
Declaration(ObjectProperty(SOMA:hasBindingRole))
Declaration(ObjectProperty(SOMA:hasFirstStep))
Declaration(ObjectProperty(SOMA:hasNextStep))
Declaration(ObjectProperty(SOMA:hasPredecessor))
Declaration(ObjectProperty(SOMA:hasStep))
Declaration(ObjectProperty(SOMA:hasSuccedence))
Declaration(ObjectProperty(SOMA:hasSuccessor))
Declaration(ObjectProperty(SOMA:hasTask))
Declaration(ObjectProperty(SOMA:isPlanFor))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>))
Declaration(DataProperty(SOMA:hasPriority))
Declaration(NamedIndividual(SOMA:FailWFNoContinuation))
Declaration(NamedIndividual(SOMA:FailWFNondeterministicContinuation))
Declaration(NamedIndividual(SOMA:FailWFUninterpretableTask))

############################
#   Object Properties
############################

# Object Property: :hasPreviousStep (has previous step)

AnnotationAssertion(rdfs:comment :hasPreviousStep "An ordering relation between tasks in some workflow, stating that a task is preceded by another.")
AnnotationAssertion(rdfs:label :hasPreviousStep "has previous step")
SubObjectPropertyOf(:hasPreviousStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#directlyFollows>)
InverseObjectProperties(:hasPreviousStep SOMA:hasNextStep)
ObjectPropertyDomain(:hasPreviousStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)
ObjectPropertyRange(:hasPreviousStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)

# Object Property: :isFirstStepOf (is first step of)

AnnotationAssertion(rdfs:comment :isFirstStepOf "A relation stating that some task is the first one in a workflow.")
AnnotationAssertion(rdfs:label :isFirstStepOf "is first step of")
SubObjectPropertyOf(:isFirstStepOf :isStepOf)
InverseObjectProperties(:isFirstStepOf SOMA:hasFirstStep)
ObjectPropertyDomain(:isFirstStepOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)
ObjectPropertyRange(:isFirstStepOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)

# Object Property: :isStepOf (is step of)

AnnotationAssertion(rdfs:comment :isStepOf "A relation stating that a task is a step in a workflow.")
AnnotationAssertion(rdfs:label :isStepOf "is step of")
SubObjectPropertyOf(:isStepOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isTaskDefinedIn>)
InverseObjectProperties(:isStepOf SOMA:hasStep)
ObjectPropertyDomain(:isStepOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)
ObjectPropertyRange(:isStepOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)

# Object Property: SOMA:definesInput (SOMA:definesInput)

AnnotationAssertion(rdfs:comment SOMA:definesInput "The defined participant is an \"input\": 

- some object existing at the beginning of a Task's execution, and that will be acted on during the execution of the task;
- some region/value which informs the way in which the Task will be executed.")
SubObjectPropertyOf(SOMA:definesInput SOMA:definesParticipant)
ObjectPropertyDomain(SOMA:definesInput <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>)
ObjectPropertyRange(SOMA:definesInput ObjectUnionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>))

# Object Property: SOMA:definesOutput (SOMA:definesOutput)

AnnotationAssertion(rdfs:comment SOMA:definesOutput "Defines an \"output\" participant:

- an Entity (Object or state of affairs) that exists as a result of the execution of a Task;
- a Region/value that has been demarcated/computed as a result of the execution of a Task.")
SubObjectPropertyOf(SOMA:definesOutput SOMA:definesParticipant)
ObjectPropertyDomain(SOMA:definesOutput <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>)
ObjectPropertyRange(SOMA:definesOutput ObjectUnionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>))

# Object Property: SOMA:definesParticipant (SOMA:definesParticipant)

AnnotationAssertion(rdfs:comment SOMA:definesParticipant "A Description definesParticipant a Concept to classify participants in Events associated to that Description.

The prototypical example is a Task, which is a concept to classify Actions (a form of Event). A Task may define several Roles, with which to classify participants in the event of that Task's execution.")
SubObjectPropertyOf(SOMA:definesParticipant <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines>)
ObjectPropertyDomain(SOMA:definesParticipant <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>)
ObjectPropertyRange(SOMA:definesParticipant <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Concept>)

# Object Property: SOMA:hasBinding (has binding)

AnnotationAssertion(rdfs:comment SOMA:hasBinding "Asserts that in a context described by Description, a Binding relation holds.")
AnnotationAssertion(rdfs:label SOMA:hasBinding "has binding"@en)
SubObjectPropertyOf(SOMA:hasBinding <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>)
ObjectPropertyDomain(SOMA:hasBinding <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>)
ObjectPropertyRange(SOMA:hasBinding SOMA:Binding)

# Object Property: SOMA:hasBindingFiller (has binding filler)

AnnotationAssertion(rdfs:comment SOMA:hasBindingFiller "Indicates that an Entity is described by a Binding, in that it is associated with the Role/Parameter that the Binding binds it to. The Binding is only valid in some descriptive context such as a Workflow or Narrative.

Note, the filler can be a Role/Parameter as well, and there are two distinct interpretations, depending on whether the Binding is a RoleRoleBinding or a RoleFillerBinding. See the comments on Binding for more details.

Only RoleFillerBindings can have general Entities as fillers. RoleRoleBindings can only connect to Roles or Parameters via this property.")
AnnotationAssertion(rdfs:label SOMA:hasBindingFiller "has binding filler"@en)
SubObjectPropertyOf(SOMA:hasBindingFiller <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes>)
ObjectPropertyDomain(SOMA:hasBindingFiller SOMA:Binding)
ObjectPropertyRange(SOMA:hasBindingFiller <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:hasBindingRole (has binding role)

AnnotationAssertion(rdfs:comment SOMA:hasBindingRole "Indicates that a Role/Parameter is going to be associated to some filler, or other Role/Parameter, by a Binding. The Binding is only valid in some descriptive context such as a Narrative or Workflow.")
AnnotationAssertion(rdfs:label SOMA:hasBindingRole "has binding role"@en)
SubObjectPropertyOf(SOMA:hasBindingRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>)
ObjectPropertyDomain(SOMA:hasBindingRole SOMA:Binding)
ObjectPropertyRange(SOMA:hasBindingRole ObjectUnionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>))

# Object Property: SOMA:hasFirstStep (has first step)

AnnotationAssertion(rdfs:comment SOMA:hasFirstStep "A relation from a Workflow to its first Task.")
AnnotationAssertion(rdfs:label SOMA:hasFirstStep "has first step")
SubObjectPropertyOf(SOMA:hasFirstStep SOMA:hasStep)
ObjectPropertyDomain(SOMA:hasFirstStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)
ObjectPropertyRange(SOMA:hasFirstStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)

# Object Property: SOMA:hasNextStep (has next step)

AnnotationAssertion(rdfs:comment SOMA:hasNextStep "An ordering relation between tasks in a workflow, saying that a task is followed by another.")
AnnotationAssertion(rdfs:label SOMA:hasNextStep "has next step")
SubObjectPropertyOf(SOMA:hasNextStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#directlyPrecedes>)
ObjectPropertyDomain(SOMA:hasNextStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)
ObjectPropertyRange(SOMA:hasNextStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)

# Object Property: SOMA:hasPredecessor (has predecessor)

AnnotationAssertion(rdfs:comment SOMA:hasPredecessor "Indicates that a Task is the predecessor in a Succedence Relation; that is, this is the task to execute first.")
AnnotationAssertion(rdfs:label SOMA:hasPredecessor "has predecessor"@en)
SubObjectPropertyOf(SOMA:hasPredecessor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>)
ObjectPropertyDomain(SOMA:hasPredecessor SOMA:Succedence)
ObjectPropertyRange(SOMA:hasPredecessor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)

# Object Property: SOMA:hasStep (has step)

AnnotationAssertion(rdfs:comment SOMA:hasStep "A relation between a Workflow and a Task it contains.")
AnnotationAssertion(rdfs:label SOMA:hasStep "has step")
SubObjectPropertyOf(SOMA:hasStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesTask>)
ObjectPropertyDomain(SOMA:hasStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)
ObjectPropertyRange(SOMA:hasStep <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)

# Object Property: SOMA:hasSuccedence (has succedence)

AnnotationAssertion(rdfs:comment SOMA:hasSuccedence "A relation between a Workflow and a Succedence that appears in it.")
AnnotationAssertion(rdfs:label SOMA:hasSuccedence "has succedence"@en)
SubObjectPropertyOf(SOMA:hasSuccedence <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>)
ObjectPropertyDomain(SOMA:hasSuccedence <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)
ObjectPropertyRange(SOMA:hasSuccedence SOMA:Succedence)

# Object Property: SOMA:hasSuccessor (has successor)

AnnotationAssertion(rdfs:comment SOMA:hasSuccessor "Indicates that a Task is the successor in a Succedence Relation: that is, it is the Task to execute last.")
AnnotationAssertion(rdfs:label SOMA:hasSuccessor "has successor"@en)
SubObjectPropertyOf(SOMA:hasSuccessor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>)
ObjectPropertyDomain(SOMA:hasSuccessor SOMA:Succedence)
ObjectPropertyRange(SOMA:hasSuccessor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)

# Object Property: SOMA:hasTask (has task)

AnnotationAssertion(rdfs:comment SOMA:hasTask "A relation to indicate that a Task is part of a Workflow or ordering Relation: that is, the task may be executed during the execution of the Workflow, or there exists some Relation between the Tasks that informs how their executions are to be located in time.")
AnnotationAssertion(rdfs:label SOMA:hasTask "has task"@en)
SubObjectPropertyOf(SOMA:hasTask <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>)
ObjectPropertyDomain(SOMA:hasTask ObjectUnionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Relation> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>))
ObjectPropertyRange(SOMA:hasTask <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)


############################
#   Data Properties
############################

# Data Property: SOMA:hasPriority (SOMA:hasPriority)

AnnotationAssertion(rdfs:comment SOMA:hasPriority "A relation asserting some entity has a particular priority.")
SubDataPropertyOf(SOMA:hasPriority <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasDataValue>)
DataPropertyDomain(SOMA:hasPriority <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)



############################
#   Classes
############################

# Class: SOMA:Binding (SOMA:Binding)

AnnotationAssertion(rdfs:comment SOMA:Binding "A Relation between Roles/Parameters and their fillers that holds in a particular descriptive context, such as a Workflow or Narrative.

It covers two conceptually related, but somewhat ontologically distinct situations:

-- a binding between two Roles, or two Parameters, with the meaning that in the particular descriptive context where the Binding holds, a filler for one Role/Parameter is also a filler for the other
-- a binding between a Role/Parameter and an Entity able to fill that Role/Parameter, with the meaning that in the particular descriptive context where the Binding holds, the Entity fills the Role/Parameter.

Note: in the second case, the Entity filling the Role/Parameter may be a Role or Parameter itself. This however does NOT reduce to the first case. Consider these examples:

-- (first situation) The accountant is also the lawyer. In this case, there are two roles, and there is a person filling both of them. This is a factual, role-role binding.
-- (second situation, linking to a generic Entity) The accountant is Bob. In this case, there is a factual, role-filler binding asserting who fills the accountant role.
-- (second situation, linking to a role) The newly opened job is accountant. In this case, there is a factual, role-filler binding asserting that some role is filled by another, without making any assertion about the filler of this second role. It is not known, and not important, whether an accountant exists at this time.

There is a further, orthogonal distinction made between:
-- factual: the Binding is asserted to hold in the descriptive context
-- counterfactual: the Binding is used to express conditions in the descriptive context. A counterfactual Binding is not meant as an assertion that the Binding actually holds.")
SubClassOf(SOMA:Binding <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Relation>)
SubClassOf(SOMA:Binding ObjectUnionOf(SOMA:CounterfactualBinding SOMA:FactualBinding))
SubClassOf(SOMA:Binding ObjectUnionOf(SOMA:RoleFillerBinding SOMA:RoleRoleBinding))
SubClassOf(SOMA:Binding ObjectSomeValuesFrom(ObjectInverseOf(SOMA:hasBinding) <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>))
SubClassOf(SOMA:Binding ObjectExactCardinality(1 SOMA:hasBindingFiller <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>))
SubClassOf(SOMA:Binding ObjectExactCardinality(1 SOMA:hasBindingRole ObjectUnionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)))

# Class: SOMA:ConditionalSuccedence (Conditional succedence)

AnnotationAssertion(rdfs:comment SOMA:ConditionalSuccedence "A relation that holds between two OGPTasks that belong to the same OGPWorkflow, and which means that, if a condition is met, the successor task invocation is to be executed after the predecessor task invocation completes.

The condition is a conjunction of CounterfactualBindings. These bindings may be RoleRoleBindings (meaning, test whether the fillers for these Roles/Parameters are the same) or RoleFillerBindings (meaning, test whether the filler of the Role unifies with the candidate Entity).

An empty conjunction of CounterfactualBindings is assumed to be True.")
AnnotationAssertion(rdfs:comment SOMA:ConditionalSuccedence "Note: in RobotWorkflows, Tasks typically may have several possible successors, to be selected based on condition-testing.")
AnnotationAssertion(rdfs:label SOMA:ConditionalSuccedence "Conditional succedence"@en)
SubClassOf(SOMA:ConditionalSuccedence SOMA:Succedence)
SubClassOf(SOMA:ConditionalSuccedence ObjectAllValuesFrom(SOMA:hasBinding SOMA:CounterfactualBinding))

# Class: SOMA:CounterfactualBinding (Counterfactual binding)

AnnotationAssertion(rdfs:comment SOMA:CounterfactualBinding "CounterfactualBindings are used to express conditions:

-- that two roles share a filler (RoleRoleBindings);
-- that the filler of a role is a particular entity (RoleFillerBindings). This is typically the case when the filler of the role may be one of a few constants, as is the case with the execution status of a robot task.

TODO: for the robot workflows we are likely to need at the start, testing equality of fillers is enough. In the future, we may want to replace that with unifiability of fillers.")
AnnotationAssertion(rdfs:label SOMA:CounterfactualBinding "Counterfactual binding"@en)
SubClassOf(SOMA:CounterfactualBinding SOMA:Binding)
DisjointClasses(SOMA:CounterfactualBinding SOMA:FactualBinding)

# Class: SOMA:FactualBinding (Factial binding)

AnnotationAssertion(rdfs:comment SOMA:FactualBinding "FactualBindings are used in a workflow to assert that:

-- task- or workflow-defined roles share fillers (RoleRoleBindings). Example, the instrument of a cutting task may be the actee of a grasping task;
-- task- or workflow-defined roles are filled by a particular entity (RoleFillerBindings). This is typically the case when roles, and especially parameters, can be assigned to constants. Example, the waiting time to cook soft eggs is 3 minutes.")
AnnotationAssertion(rdfs:label SOMA:FactualBinding "Factial binding"@en)
SubClassOf(SOMA:FactualBinding SOMA:Binding)

# Class: SOMA:RoleFillerBinding (Role filler binding)

AnnotationAssertion(rdfs:comment SOMA:RoleFillerBinding "A binding that connects a role to a particular filler.")
AnnotationAssertion(rdfs:label SOMA:RoleFillerBinding "Role filler binding"@en)
SubClassOf(SOMA:RoleFillerBinding SOMA:Binding)
DisjointClasses(SOMA:RoleFillerBinding SOMA:RoleRoleBinding)

# Class: SOMA:RoleRoleBinding (Role role binding)

AnnotationAssertion(rdfs:comment SOMA:RoleRoleBinding "A binding that asserts that two roles have the same filler.")
AnnotationAssertion(rdfs:label SOMA:RoleRoleBinding "Role role binding"@en)
SubClassOf(SOMA:RoleRoleBinding SOMA:Binding)
SubClassOf(SOMA:RoleRoleBinding ObjectAllValuesFrom(SOMA:hasBindingFiller ObjectUnionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)))

# Class: SOMA:StatusFailure (SOMA:StatusFailure)

AnnotationAssertion(rdfs:comment SOMA:StatusFailure "A status indicating the failure during some workflow execution.")
SubClassOf(SOMA:StatusFailure <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Region>)

# Class: SOMA:Succedence (SOMA:Succedence)

AnnotationAssertion(rdfs:comment SOMA:Succedence "A relation that holds in some descriptive context such as a Workflow, between two TaskInvocations belonging to that same Workflow. It means that one task invocation should follow the other.

Note: a successor relation implemented as an OWL object property is sometimes enough, but not in general; in particular, when there are conditions imposed on the succession.

As a result, a reification pattern was applied here.")
AnnotationAssertion(rdfs:comment SOMA:Succedence "Note: it is possible for a Succedence relation to exist between a TaskInvocation and itself; in this case, both the hasPredecessor and hasSuccessor roles are filled by the same TaskInvocation individual.

Care must be taken with this however, as a natural interpretation of this situation is an infinite loop.")
SubClassOf(SOMA:Succedence <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Relation>)
SubClassOf(SOMA:Succedence ObjectSomeValuesFrom(ObjectInverseOf(SOMA:hasSuccedence) <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>))
SubClassOf(SOMA:Succedence ObjectExactCardinality(1 SOMA:hasPredecessor SOMA:TaskInvocation))
SubClassOf(SOMA:Succedence ObjectExactCardinality(1 SOMA:hasSuccessor SOMA:TaskInvocation))

# Class: SOMA:TaskInvocation (Task invocation)

AnnotationAssertion(rdfs:comment SOMA:TaskInvocation "An elementary workflow consisting in the invocation of one single task. It is used as a descriptive context inside of which factual bindings are valid between the task's arguments and other entities (such as the \"local variables\" of a larger workflow).")
AnnotationAssertion(rdfs:label SOMA:TaskInvocation "Task invocation"@en)
SubClassOf(SOMA:TaskInvocation <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Workflow>)
SubClassOf(SOMA:TaskInvocation ObjectAllValuesFrom(SOMA:hasBinding SOMA:FactualBinding))
SubClassOf(SOMA:TaskInvocation ObjectExactCardinality(1 <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesTask> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>))


############################
#   Named Individuals
############################

# Individual: SOMA:FailWFNoContinuation (SOMA:FailWFNoContinuation)

AnnotationAssertion(rdfs:comment SOMA:FailWFNoContinuation "A particular kind of failure: the workflow fails because there is no way to continue it, and the normal exit has not been reached.")
ClassAssertion(SOMA:StatusFailure SOMA:FailWFNoContinuation)

# Individual: SOMA:FailWFNondeterministicContinuation (SOMA:FailWFNondeterministicContinuation)

AnnotationAssertion(rdfs:comment SOMA:FailWFNondeterministicContinuation "A particular kind of failure: it is not clear how to continue a workflow because several possibilities exist.")
ClassAssertion(SOMA:StatusFailure SOMA:FailWFNondeterministicContinuation)

# Individual: SOMA:FailWFUninterpretableTask (SOMA:FailWFUninterpretableTask)

AnnotationAssertion(rdfs:comment SOMA:FailWFUninterpretableTask "A particular kind of failure: a task is not recognized and not associated to anything that could execute it, nor to a workflow that could detail its structure into simpler structure.")
ClassAssertion(SOMA:StatusFailure SOMA:FailWFUninterpretableTask)


AnnotationAssertion(rdfs:label SOMA:HasQualityRegion "Has quality region"@en)
)