Prefix(:=<http://www.ease-crc.org/ont/SOMA.owl#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(SOMA:=<http://www.ease-crc.org/ont/SOMA.owl#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.ease-crc.org/ont/SOMA.owl>
Import(<http://www.ease-crc.org/ont/DUL.owl>)
Annotation(rdfs:comment "SOMA main OWL file.

Useful for defining a common set of imports for all other SOMA modules; currently, this set only includes DUL.

While there are some axioms defined in SOMA.owl, these will be moved to the relevant specialized modules.")

Declaration(Class(SOMA:Accident))
Declaration(Class(SOMA:ActionExecutionPlan))
Declaration(Class(SOMA:Amateurish))
Declaration(Class(SOMA:BehavioralDiagnosis))
Declaration(Class(SOMA:Clumsiness))
Declaration(Class(SOMA:DexterityDiagnosis))
Declaration(Class(SOMA:Episode))
Declaration(Class(SOMA:FailedAttempt))
Declaration(Class(SOMA:Fluid))
Declaration(Class(SOMA:Foolishness))
Declaration(Class(SOMA:FunctionalDiagnosis))
Declaration(Class(SOMA:HardwareDiagnosis))
Declaration(Class(SOMA:HumanActivityRecording))
Declaration(Class(SOMA:Inability))
Declaration(Class(SOMA:Infeasibility))
Declaration(Class(SOMA:Masterful))
Declaration(Class(SOMA:MedicalDiagnosis))
Declaration(Class(SOMA:RecordedEpisode))
Declaration(Class(SOMA:Reification))
Declaration(Class(SOMA:Scene))
Declaration(Class(SOMA:Sluggishness))
Declaration(Class(SOMA:SoftwareDiagnosis))
Declaration(Class(SOMA:State))
Declaration(Class(SOMA:StateTransition))
Declaration(Class(SOMA:Status))
Declaration(Class(SOMA:SuccessDiagnosis))
Declaration(Class(SOMA:Successfulness))
Declaration(Class(SOMA:TechnicalDiagnosis))
Declaration(Class(SOMA:Threshold))
Declaration(Class(SOMA:Unsuccessfulness))
Declaration(ObjectProperty(SOMA:after))
Declaration(ObjectProperty(SOMA:before))
Declaration(ObjectProperty(SOMA:causesTransition))
Declaration(ObjectProperty(SOMA:coOccurs))
Declaration(ObjectProperty(SOMA:contains))
Declaration(ObjectProperty(SOMA:containsEvent))
Declaration(ObjectProperty(SOMA:derivedFrom))
Declaration(ObjectProperty(SOMA:directlyDerivedFrom))
Declaration(ObjectProperty(SOMA:during))
Declaration(ObjectProperty(SOMA:finishedBy))
Declaration(ObjectProperty(SOMA:finishes))
Declaration(ObjectProperty(SOMA:firstMember))
Declaration(ObjectProperty(SOMA:hasGoal))
Declaration(ObjectProperty(SOMA:hasInitialScene))
Declaration(ObjectProperty(SOMA:hasInitialState))
Declaration(ObjectProperty(SOMA:hasInputParameter))
Declaration(ObjectProperty(SOMA:hasOutputParameter))
Declaration(ObjectProperty(SOMA:hasPhase))
Declaration(ObjectProperty(SOMA:hasPhysicalComponent))
Declaration(ObjectProperty(SOMA:hasSoftwareAgent))
Declaration(ObjectProperty(SOMA:hasStatus))
Declaration(ObjectProperty(SOMA:hasTerminalScene))
Declaration(ObjectProperty(SOMA:hasTerminalState))
Declaration(ObjectProperty(SOMA:includesConcept))
Declaration(ObjectProperty(SOMA:includesRecord))
Declaration(ObjectProperty(SOMA:includesSituation))
Declaration(ObjectProperty(SOMA:involvesArtifact))
Declaration(ObjectProperty(SOMA:involvesPlace))
Declaration(ObjectProperty(SOMA:isArtifactInvolvedIn))
Declaration(ObjectProperty(SOMA:isCausedByEvent))
Declaration(ObjectProperty(SOMA:isConceptIncludedIn))
Declaration(ObjectProperty(SOMA:isContainedIn))
Declaration(ObjectProperty(SOMA:isDirectSourceFor))
Declaration(ObjectProperty(SOMA:isInitialSceneOf))
Declaration(ObjectProperty(SOMA:isInitialStateOf))
Declaration(ObjectProperty(SOMA:isInputParameterFor))
Declaration(ObjectProperty(SOMA:isInputRoleOf))
Declaration(ObjectProperty(SOMA:isOccurrenceOf))
Declaration(ObjectProperty(SOMA:isOccurringIn))
Declaration(ObjectProperty(SOMA:isOutputParameterFor))
Declaration(ObjectProperty(SOMA:isOutputRoleOf))
Declaration(ObjectProperty(SOMA:isPlaceInvolvedIn))
Declaration(ObjectProperty(SOMA:isPlanFor))
Declaration(ObjectProperty(SOMA:isRecordIncludedBy))
Declaration(ObjectProperty(SOMA:isSituationIncludedIn))
Declaration(ObjectProperty(SOMA:isSourceFor))
Declaration(ObjectProperty(SOMA:isTaskOfInputRole))
Declaration(ObjectProperty(SOMA:isTaskOfOutputRole))
Declaration(ObjectProperty(SOMA:isTerminalSceneOf))
Declaration(ObjectProperty(SOMA:isTerminalStateOf))
Declaration(ObjectProperty(SOMA:meets))
Declaration(ObjectProperty(SOMA:metBy))
Declaration(ObjectProperty(SOMA:overlappedBy))
Declaration(ObjectProperty(SOMA:overlappedOn))
Declaration(ObjectProperty(SOMA:simultaneous))
Declaration(ObjectProperty(SOMA:startedBy))
Declaration(ObjectProperty(SOMA:starts))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#associatedWith>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasComponent>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasConstituent>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasPart>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasQuality>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasRegion>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#involvesAgent>))
Declaration(ObjectProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isParticipantIn>))
Declaration(DataProperty(SOMA:hasDataFormat))
Declaration(DataProperty(SOMA:hasEventBegin))
Declaration(DataProperty(SOMA:hasEventEnd))
Declaration(DataProperty(SOMA:hasEventTime))
Declaration(DataProperty(SOMA:hasIntervalBegin))
Declaration(DataProperty(SOMA:hasIntervalEnd))
Declaration(DataProperty(SOMA:hasIntervalTime))
Declaration(DataProperty(SOMA:hasNameString))
Declaration(DataProperty(SOMA:hasPersistentIdentifier))
Declaration(DataProperty(SOMA:isReificationOf))
Declaration(DataProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasDataValue>))
Declaration(DataProperty(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasRegionDataValue>))
Declaration(NamedIndividual(SOMA:RDFType))
Declaration(AnnotationProperty(SOMA:UsageGuideline))
Declaration(AnnotationProperty(SOMA:nickname))
Declaration(AnnotationProperty(SOMA:symbol))
Declaration(Datatype(SOMA:array_boolean))
Declaration(Datatype(SOMA:array_double))
Declaration(Datatype(SOMA:array_float))
Declaration(Datatype(SOMA:array_int))
Declaration(Datatype(SOMA:array_string))
Declaration(Datatype(SOMA:array_uint))
############################
#   Annotation Properties
############################

# Annotation Property: SOMA:UsageGuideline (SOMA:UsageGuideline)

AnnotationAssertion(rdfs:comment SOMA:UsageGuideline "Provides a definition, or usage guideline, aimed at a particular community of the ontology's users. The community is identified by the subproperty of UsageGuideline.

A style recommendation for usage guidelines is that they should be brief. In contrast to usual concept annotations that can, and should be detailed about the reasons behind modelling decisions, usage guidelines are simply meant to answer questions about when it is appropriate to use a concept, and they must be a practical, easy to query and understand resource.")

# Annotation Property: SOMA:nickname (SOMA:nickname)

AnnotationAssertion(rdfs:comment SOMA:nickname "Similar to rdfs:label, but without GUI or reasoner impact in Protege; avoiding Protege problems is why this is not a label subproperty. Nicknames are used by particular software working with the ontology as a way to give community-specific names to concepts. Communities are identified by the subproperty of nickname.")

# Annotation Property: SOMA:symbol (SOMA:symbol)

AnnotationAssertion(rdfs:comment SOMA:symbol "An annotation property which should be used to record by what symbols or abbreviations, if any, some relation or entity is known in scientific literature.")
AnnotationPropertyRange(SOMA:symbol xsd:string)


############################
#   Object Properties
############################

# Object Property: SOMA:after (SOMA:after)

AnnotationAssertion(SOMA:symbol SOMA:after ">")
AnnotationAssertion(rdfs:comment SOMA:after "A relation between entities, expressing a 'sequence' schema where one of the entities strictly ends before the other one.")
SubObjectPropertyOf(SOMA:after <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#follows>)
InverseObjectProperties(SOMA:after SOMA:before)
TransitiveObjectProperty(SOMA:after)
ObjectPropertyDomain(SOMA:after <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:after <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:before (SOMA:before)

AnnotationAssertion(SOMA:symbol SOMA:before "<")
AnnotationAssertion(rdfs:comment SOMA:before "A relation between entities, expressing a 'sequence' schema where one of the entities strictly ends before the other one.")
SubObjectPropertyOf(SOMA:before <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#precedes>)
TransitiveObjectProperty(SOMA:before)
ObjectPropertyDomain(SOMA:before <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:before <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:causesTransition (causes transition)

AnnotationAssertion(rdfs:comment SOMA:causesTransition "A Transition between two Situations is always the result of some Event, and the causesTransition relation should be used to record the causal relation from the Event to the Transition.")
AnnotationAssertion(rdfs:label SOMA:causesTransition "causes transition")
SubObjectPropertyOf(SOMA:causesTransition <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isEventIncludedIn>)
InverseObjectProperties(SOMA:causesTransition SOMA:isCausedByEvent)
ObjectPropertyDomain(SOMA:causesTransition <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:causesTransition <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition>)

# Object Property: SOMA:coOccurs (co occurs)

AnnotationAssertion(rdfs:comment SOMA:coOccurs "A schematic relation between any events that also implies that one event is temporally contained in the other.

Sub-properties are used to distinct between different cases of event endpoint relations that hold for different types of co-occurance.")
AnnotationAssertion(rdfs:label SOMA:coOccurs "co occurs")
SubObjectPropertyOf(SOMA:coOccurs <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#overlaps>)
SymmetricObjectProperty(SOMA:coOccurs)
ObjectPropertyDomain(SOMA:coOccurs <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:coOccurs <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:contains (SOMA:contains)

AnnotationAssertion(rdfs:comment SOMA:contains "A schematic relation asserting containment, understood in a very broad sense, by one Entity of another. The relation is defined with domain and range of maximum generality, as it is possible to construe containment to apply between Events, between Objects, between Qualities and so on. Care should be taken when using it that the construal of containment makes sense and is useful. If a clearer relation expresses the connection between two Entities, use that relation instead. For example, rather than saying an Event contains an Object, it is probably better to say the Event has that Object as a participant. More specific versions of this relation exist, e.g. containsEvent, so it is likely that there will be few situations where it should be used itself. However, by acting as a superproperty to several relations, it captures a core similarity between these and enables taxonomy-based similarity metrics.")
SubObjectPropertyOf(SOMA:contains <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#overlaps>)
InverseObjectProperties(SOMA:contains SOMA:isContainedIn)
ObjectPropertyDomain(SOMA:contains <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:contains <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:containsEvent (contains event)

AnnotationAssertion(SOMA:symbol SOMA:containsEvent "di")
AnnotationAssertion(rdfs:comment SOMA:containsEvent "`A contains event B` means that A strictly starts before, and ends after B, i.e. B is wholly contained in A.")
AnnotationAssertion(rdfs:label SOMA:containsEvent "contains event")
SubObjectPropertyOf(SOMA:containsEvent SOMA:coOccurs)
SubObjectPropertyOf(SOMA:containsEvent SOMA:contains)
InverseObjectProperties(SOMA:containsEvent SOMA:during)
TransitiveObjectProperty(SOMA:containsEvent)
ObjectPropertyDomain(SOMA:containsEvent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:containsEvent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:derivedFrom (derived from)

AnnotationAssertion(rdfs:comment SOMA:derivedFrom "The (transitive) relation between an information object and another which it has been derived from.")
AnnotationAssertion(rdfs:label SOMA:derivedFrom "derived from")
SubObjectPropertyOf(SOMA:derivedFrom <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#associatedWith>)
InverseObjectProperties(SOMA:derivedFrom SOMA:isSourceFor)
TransitiveObjectProperty(SOMA:derivedFrom)
ObjectPropertyDomain(SOMA:derivedFrom <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)
ObjectPropertyRange(SOMA:derivedFrom <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)

# Object Property: SOMA:directlyDerivedFrom (directly derived from)

AnnotationAssertion(rdfs:comment SOMA:directlyDerivedFrom "The relation between an information object and another which it has been derived from.")
AnnotationAssertion(rdfs:label SOMA:directlyDerivedFrom "directly derived from")
SubObjectPropertyOf(SOMA:directlyDerivedFrom SOMA:derivedFrom)
InverseObjectProperties(SOMA:directlyDerivedFrom SOMA:isDirectSourceFor)

# Object Property: SOMA:during (SOMA:during)

AnnotationAssertion(SOMA:symbol SOMA:during "d")
AnnotationAssertion(rdfs:comment SOMA:during "`A during B` means that B strictly starts before, and ends after A, i.e. A is wholly contained in B.")
SubObjectPropertyOf(SOMA:during SOMA:coOccurs)
SubObjectPropertyOf(SOMA:during SOMA:isContainedIn)
TransitiveObjectProperty(SOMA:during)
ObjectPropertyDomain(SOMA:during <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:during <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:finishedBy (finished by)

AnnotationAssertion(SOMA:symbol SOMA:finishedBy "fi")
AnnotationAssertion(rdfs:comment SOMA:finishedBy "`A finishes B` means that A ends exactly where B ends, and that B strictly starts before A.  As in \"I finish my day by taking a shower\".")
AnnotationAssertion(rdfs:label SOMA:finishedBy "finished by"@en)
SubObjectPropertyOf(SOMA:finishedBy SOMA:coOccurs)
InverseObjectProperties(SOMA:finishedBy SOMA:finishes)
TransitiveObjectProperty(SOMA:finishedBy)
ObjectPropertyDomain(SOMA:finishedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:finishedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:finishes (SOMA:finishes)

AnnotationAssertion(SOMA:symbol SOMA:finishes "f")
AnnotationAssertion(rdfs:comment SOMA:finishes "`A finishes B` means that A ends exactly where B ends, and that B strictly starts before A.  As in \"I finish my day by taking a shower\".")
SubObjectPropertyOf(SOMA:finishes SOMA:coOccurs)
TransitiveObjectProperty(SOMA:finishes)
ObjectPropertyDomain(SOMA:finishes <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:finishes <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:firstMember (first member)

AnnotationAssertion(rdfs:comment SOMA:firstMember "A relation between a collection and a member of it that is least according to some ordering. This ordering can be arbitrary, i.e. the order in which Entities are recorded in the Collection.")
AnnotationAssertion(rdfs:label SOMA:firstMember "first member"@en)
SubObjectPropertyOf(SOMA:firstMember <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasMember>)
ObjectPropertyDomain(SOMA:firstMember <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Collection>)
ObjectPropertyRange(SOMA:firstMember <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:hasGoal (has goal)

AnnotationAssertion(rdfs:comment SOMA:hasGoal "A relation from an Entity to a Goal it pursues. Agents can pursue Goals, and Tasks are also construed as pursuing Goals.")
AnnotationAssertion(rdfs:label SOMA:hasGoal "has goal"@en)
SubObjectPropertyOf(SOMA:hasGoal <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isDescribedBy>)
ObjectPropertyDomain(SOMA:hasGoal <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:hasGoal <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Goal>)

# Object Property: SOMA:hasInitialScene (has initial scene)

AnnotationAssertion(rdfs:comment SOMA:hasInitialScene "A relation between StateTransitions and Scenes, which identifies the scene the transition starts from.")
AnnotationAssertion(rdfs:label SOMA:hasInitialScene "has initial scene")
SubObjectPropertyOf(SOMA:hasInitialScene SOMA:hasInitialState)
InverseObjectProperties(SOMA:hasInitialScene SOMA:isInitialSceneOf)
AsymmetricObjectProperty(SOMA:hasInitialScene)
IrreflexiveObjectProperty(SOMA:hasInitialScene)
ObjectPropertyDomain(SOMA:hasInitialScene SOMA:StateTransition)
ObjectPropertyRange(SOMA:hasInitialScene SOMA:Scene)

# Object Property: SOMA:hasInitialState (has initial state)

AnnotationAssertion(rdfs:comment SOMA:hasInitialState "A relation which connects a Transition to the Situation it starts from.")
AnnotationAssertion(rdfs:label SOMA:hasInitialState "has initial state")
SubObjectPropertyOf(SOMA:hasInitialState SOMA:includesSituation)
InverseObjectProperties(SOMA:hasInitialState SOMA:isInitialStateOf)
ObjectPropertyDomain(SOMA:hasInitialState <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition>)
ObjectPropertyRange(SOMA:hasInitialState <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)

# Object Property: SOMA:hasInputParameter (has input parameter)

AnnotationAssertion(rdfs:comment SOMA:hasInputParameter "A relation between a Task and one of its input parameters.")
AnnotationAssertion(rdfs:comment SOMA:hasInputParameter "A relation from an EventType (typically, a Task) and a parameter describing some state of affairs before the event classified by the EventType takes place, and which contributes towards that event happening.")
AnnotationAssertion(rdfs:label SOMA:hasInputParameter "has input parameter")
SubObjectPropertyOf(SOMA:hasInputParameter <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParameter>)
InverseObjectProperties(SOMA:hasInputParameter SOMA:isInputParameterFor)
ObjectPropertyDomain(SOMA:hasInputParameter <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>)
ObjectPropertyRange(SOMA:hasInputParameter <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter>)

# Object Property: SOMA:hasOutputParameter (has output parameter)

AnnotationAssertion(rdfs:comment SOMA:hasOutputParameter "A relation between a Task and one of its output parameters.")
AnnotationAssertion(rdfs:comment SOMA:hasOutputParameter "A relation from an EventType (typically a Task) to a Parameter describing an outcome of the event classified by the EventType.")
AnnotationAssertion(rdfs:label SOMA:hasOutputParameter "has output parameter")
SubObjectPropertyOf(SOMA:hasOutputParameter <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParameter>)
InverseObjectProperties(SOMA:hasOutputParameter SOMA:isOutputParameterFor)
ObjectPropertyDomain(SOMA:hasOutputParameter <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>)
ObjectPropertyRange(SOMA:hasOutputParameter <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter>)

# Object Property: SOMA:hasPhase (has phase)

AnnotationAssertion(rdfs:comment SOMA:hasPhase "A relation used to describe the structure of an Action or Process in terms of phases, i.e. subprocesses and states that occur during its unfolding.")
AnnotationAssertion(rdfs:label SOMA:hasPhase "has phase")
SubObjectPropertyOf(SOMA:hasPhase <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasConstituent>)
ObjectPropertyDomain(SOMA:hasPhase ObjectUnionOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Action> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Process>))
ObjectPropertyRange(SOMA:hasPhase ObjectUnionOf(SOMA:State <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Process>))

# Object Property: SOMA:hasPhysicalComponent (has physical component)

AnnotationAssertion(rdfs:comment SOMA:hasPhysicalComponent "A relation used to describe the structure of a PhysicalObject in terms of physical components, i.e. what other PhysicalObjects are components of it.")
AnnotationAssertion(rdfs:label SOMA:hasPhysicalComponent "has physical component")
SubObjectPropertyOf(SOMA:hasPhysicalComponent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasComponent>)
ObjectPropertyDomain(SOMA:hasPhysicalComponent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)
ObjectPropertyRange(SOMA:hasPhysicalComponent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject>)

# Object Property: SOMA:hasSoftwareAgent (has software agent)

AnnotationAssertion(rdfs:comment SOMA:hasSoftwareAgent "A relation from an Event and the SoftwareAgent responsible for making that Event happen.")
AnnotationAssertion(rdfs:label SOMA:hasSoftwareAgent "has software agent")
SubObjectPropertyOf(SOMA:hasSoftwareAgent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#involvesAgent>)
ObjectPropertyDomain(SOMA:hasSoftwareAgent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:hasStatus (has status)

AnnotationAssertion(rdfs:comment SOMA:hasStatus "A relation from an Entity to a Quality that is indicative of the Entity's state, e.g. if it is a device, its state of operation.")
AnnotationAssertion(rdfs:label SOMA:hasStatus "has status")
SubObjectPropertyOf(SOMA:hasStatus <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasQuality>)

# Object Property: SOMA:hasTerminalScene (has terminal scene)

AnnotationAssertion(rdfs:comment SOMA:hasTerminalScene "A relation between StateTransitions and Scenes, which identifies the scene the transition is expected to end at.")
AnnotationAssertion(rdfs:label SOMA:hasTerminalScene "has terminal scene")
SubObjectPropertyOf(SOMA:hasTerminalScene SOMA:hasTerminalState)
InverseObjectProperties(SOMA:hasTerminalScene SOMA:isTerminalSceneOf)
AsymmetricObjectProperty(SOMA:hasTerminalScene)
IrreflexiveObjectProperty(SOMA:hasTerminalScene)
ObjectPropertyDomain(SOMA:hasTerminalScene SOMA:StateTransition)
ObjectPropertyRange(SOMA:hasTerminalScene SOMA:Scene)

# Object Property: SOMA:hasTerminalState (has terminal state)

AnnotationAssertion(rdfs:comment SOMA:hasTerminalState "A relation from a Transition to the Situation it ends in.")
AnnotationAssertion(rdfs:label SOMA:hasTerminalState "has terminal state")
SubObjectPropertyOf(SOMA:hasTerminalState SOMA:includesSituation)
InverseObjectProperties(SOMA:hasTerminalState SOMA:isTerminalStateOf)
ObjectPropertyDomain(SOMA:hasTerminalState <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition>)
ObjectPropertyRange(SOMA:hasTerminalState <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)

# Object Property: SOMA:includesConcept (includes concept)

AnnotationAssertion(rdfs:comment SOMA:includesConcept "A relation recording that a Situation has a Concept as participant in some sort of role.")
AnnotationAssertion(rdfs:label SOMA:includesConcept "includes concept")
SubObjectPropertyOf(SOMA:includesConcept <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#includesObject>)
InverseObjectProperties(SOMA:includesConcept SOMA:isConceptIncludedIn)
ObjectPropertyDomain(SOMA:includesConcept <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)
ObjectPropertyRange(SOMA:includesConcept <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Concept>)

# Object Property: SOMA:includesRecord (SOMA:includesRecord)

AnnotationAssertion(rdfs:comment SOMA:includesRecord "A relationship indicating that an Event has been recorded by an InformationObject")
SubObjectPropertyOf(SOMA:includesRecord <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isReferenceOf>)
InverseObjectProperties(SOMA:includesRecord SOMA:isRecordIncludedBy)
ObjectPropertyDomain(SOMA:includesRecord <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:includesRecord <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)

# Object Property: SOMA:includesSituation (includes situation)

AnnotationAssertion(rdfs:comment SOMA:includesSituation "A relation recording that a Situation has a (sub) Situation as participant in some role.")
AnnotationAssertion(rdfs:label SOMA:includesSituation "includes situation")
SubObjectPropertyOf(SOMA:includesSituation <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isSettingFor>)
InverseObjectProperties(SOMA:includesSituation SOMA:isSituationIncludedIn)
ObjectPropertyDomain(SOMA:includesSituation <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)
ObjectPropertyRange(SOMA:includesSituation <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)

# Object Property: SOMA:involvesArtifact (involves artifact)

AnnotationAssertion(rdfs:comment SOMA:involvesArtifact "Artifact participation.")
AnnotationAssertion(rdfs:label SOMA:involvesArtifact "involves artifact")
SubObjectPropertyOf(SOMA:involvesArtifact <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant>)
InverseObjectProperties(SOMA:involvesArtifact SOMA:isArtifactInvolvedIn)
ObjectPropertyDomain(SOMA:involvesArtifact <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:involvesArtifact <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalArtifact>)

# Object Property: SOMA:involvesPlace (involves place)

AnnotationAssertion(rdfs:comment SOMA:involvesPlace "A relation recording that an Event makes some use of a PhysicalPlace. Typically this place is where the Event is located.")
AnnotationAssertion(rdfs:label SOMA:involvesPlace "involves place")
SubObjectPropertyOf(SOMA:involvesPlace <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParticipant>)
InverseObjectProperties(SOMA:involvesPlace SOMA:isPlaceInvolvedIn)
ObjectPropertyDomain(SOMA:involvesPlace <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:involvesPlace <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalPlace>)

# Object Property: SOMA:isArtifactInvolvedIn (is artifact involved in)

AnnotationAssertion(rdfs:comment SOMA:isArtifactInvolvedIn "Artifact participation.")
AnnotationAssertion(rdfs:label SOMA:isArtifactInvolvedIn "is artifact involved in")
SubObjectPropertyOf(SOMA:isArtifactInvolvedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isParticipantIn>)
ObjectPropertyDomain(SOMA:isArtifactInvolvedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalArtifact>)
ObjectPropertyRange(SOMA:isArtifactInvolvedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:isCausedByEvent (is caused by event)

AnnotationAssertion(rdfs:comment SOMA:isCausedByEvent "A relation recording that a Transition is the result of some Event.")
AnnotationAssertion(rdfs:label SOMA:isCausedByEvent "is caused by event")
SubObjectPropertyOf(SOMA:isCausedByEvent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#includesEvent>)
ObjectPropertyDomain(SOMA:isCausedByEvent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition>)
ObjectPropertyRange(SOMA:isCausedByEvent <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:isConceptIncludedIn (is concept included in)

AnnotationAssertion(rdfs:comment SOMA:isConceptIncludedIn "A relation recording that a Concept participates in a Situation in some way.")
AnnotationAssertion(rdfs:label SOMA:isConceptIncludedIn "is concept included in")
SubObjectPropertyOf(SOMA:isConceptIncludedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isObjectIncludedIn>)
ObjectPropertyDomain(SOMA:isConceptIncludedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Concept>)
ObjectPropertyRange(SOMA:isConceptIncludedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)

# Object Property: SOMA:isContainedIn (is contained in)

AnnotationAssertion(rdfs:comment SOMA:isContainedIn "The inverse of the contains relation. See the contains relation for details.")
AnnotationAssertion(rdfs:label SOMA:isContainedIn "is contained in")
SubObjectPropertyOf(SOMA:isContainedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#overlaps>)
ObjectPropertyDomain(SOMA:isContainedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:isContainedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:isDirectSourceFor (is direct source for)

AnnotationAssertion(rdfs:comment SOMA:isDirectSourceFor "The (transitive) relation between an information object and another which was derived from the former.")
AnnotationAssertion(rdfs:label SOMA:isDirectSourceFor "is direct source for")
SubObjectPropertyOf(SOMA:isDirectSourceFor SOMA:isSourceFor)

# Object Property: SOMA:isInitialSceneOf (is initial scene of)

AnnotationAssertion(rdfs:comment SOMA:isInitialSceneOf "A relation between StateTransitions and Scenes, which identifies the scene the transition starts from.")
AnnotationAssertion(rdfs:label SOMA:isInitialSceneOf "is initial scene of")
SubObjectPropertyOf(SOMA:isInitialSceneOf SOMA:isInitialStateOf)
ObjectPropertyDomain(SOMA:isInitialSceneOf SOMA:Scene)
ObjectPropertyRange(SOMA:isInitialSceneOf SOMA:StateTransition)

# Object Property: SOMA:isInitialStateOf (is initial state of)

AnnotationAssertion(rdfs:comment SOMA:isInitialStateOf "A relation recording that a Situation was where a Transition began.")
AnnotationAssertion(rdfs:label SOMA:isInitialStateOf "is initial state of")
SubObjectPropertyOf(SOMA:isInitialStateOf SOMA:isSituationIncludedIn)
ObjectPropertyDomain(SOMA:isInitialStateOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)
ObjectPropertyRange(SOMA:isInitialStateOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition>)

# Object Property: SOMA:isInputParameterFor (is input parameter for)

AnnotationAssertion(rdfs:comment SOMA:isInputParameterFor "A relation between a Task and one of its input parameters.")
AnnotationAssertion(rdfs:comment SOMA:isInputParameterFor "A relation from a Parameter to an EventType (typically, a Task). The parameter describes some state of affairs that precedes and will contribute to the event classified by the EventType.")
AnnotationAssertion(rdfs:label SOMA:isInputParameterFor "is input parameter for")
SubObjectPropertyOf(SOMA:isInputParameterFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isParameterFor>)
ObjectPropertyDomain(SOMA:isInputParameterFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter>)
ObjectPropertyRange(SOMA:isInputParameterFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>)

# Object Property: SOMA:isInputRoleOf (is input role of)

AnnotationAssertion(rdfs:comment SOMA:isInputRoleOf "A relation between an input roles and its Task.")
AnnotationAssertion(rdfs:label SOMA:isInputRoleOf "is input role of"@en)
SubObjectPropertyOf(SOMA:isInputRoleOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasTask>)
InverseObjectProperties(SOMA:isInputRoleOf SOMA:isTaskOfInputRole)
ObjectPropertyDomain(SOMA:isInputRoleOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)
ObjectPropertyRange(SOMA:isInputRoleOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)

# Object Property: SOMA:isOccurrenceOf (is occurence of)

AnnotationAssertion(rdfs:comment SOMA:isOccurrenceOf "A relation between an event and an event type, e.g. 'taking the cup from the table' is an occurence of the motion 'approaching'.")
AnnotationAssertion(rdfs:label SOMA:isOccurrenceOf "is occurence of")
SubObjectPropertyOf(SOMA:isOccurrenceOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isClassifiedBy>)
InverseObjectProperties(SOMA:isOccurrenceOf SOMA:isOccurringIn)
ObjectPropertyDomain(SOMA:isOccurrenceOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:isOccurrenceOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>)

# Object Property: SOMA:isOccurringIn (is occurring in)

AnnotationAssertion(rdfs:comment SOMA:isOccurringIn "A relation between an event and an event type, e.g. 'taking the cup from the table' is an occurence of the motion 'approaching'.")
AnnotationAssertion(rdfs:label SOMA:isOccurringIn "is occurring in")
SubObjectPropertyOf(SOMA:isOccurringIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#classifies>)
ObjectPropertyDomain(SOMA:isOccurringIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>)
ObjectPropertyRange(SOMA:isOccurringIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:isOutputParameterFor (is output parameter for)

AnnotationAssertion(rdfs:comment SOMA:isOutputParameterFor "A relation between a Task and one of its output parameters.")
AnnotationAssertion(rdfs:comment SOMA:isOutputParameterFor "A relation from a Parameter to an EventType (typically, a Task). The parameter describes an outcome of the event classified by the EventType.")
AnnotationAssertion(rdfs:label SOMA:isOutputParameterFor "is output parameter for")
SubObjectPropertyOf(SOMA:isOutputParameterFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isParameterFor>)
ObjectPropertyDomain(SOMA:isOutputParameterFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter>)
ObjectPropertyRange(SOMA:isOutputParameterFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#EventType>)

# Object Property: SOMA:isOutputRoleOf (is output role of)

AnnotationAssertion(rdfs:comment SOMA:isOutputRoleOf "A relation between an output roles and its Task.")
AnnotationAssertion(rdfs:label SOMA:isOutputRoleOf "is output role of"@en)
SubObjectPropertyOf(SOMA:isOutputRoleOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasTask>)
InverseObjectProperties(SOMA:isOutputRoleOf SOMA:isTaskOfOutputRole)
ObjectPropertyDomain(SOMA:isOutputRoleOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)
ObjectPropertyRange(SOMA:isOutputRoleOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)

# Object Property: SOMA:isPlaceInvolvedIn (is place involved in)

AnnotationAssertion(rdfs:comment SOMA:isPlaceInvolvedIn "A relation recording that a PhysicalPlace is involved in some Event; typically, this is where the Event is located.")
AnnotationAssertion(rdfs:label SOMA:isPlaceInvolvedIn "is place involved in")
SubObjectPropertyOf(SOMA:isPlaceInvolvedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isParticipantIn>)
ObjectPropertyDomain(SOMA:isPlaceInvolvedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalPlace>)
ObjectPropertyRange(SOMA:isPlaceInvolvedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:isPlanFor (is plan for)

AnnotationAssertion(rdfs:comment SOMA:isPlanFor "A special relation between a Plan and a Task, to indicate that the Plan describes a way to achieve the Task.")
AnnotationAssertion(rdfs:label SOMA:isPlanFor "is plan for"@en)
AnnotationAssertion(rdfs:seeAlso SOMA:isPlanFor "Note that DUL already says Plans can define Tasks, but that relation is used differently: a Plan defines a Task because it contains it as a step.")
SubObjectPropertyOf(SOMA:isPlanFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#describes>)
ObjectPropertyDomain(SOMA:isPlanFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Plan>)
ObjectPropertyRange(SOMA:isPlanFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)

# Object Property: SOMA:isRecordIncludedBy (SOMA:isRecordIncludedBy)

AnnotationAssertion(rdfs:comment SOMA:isRecordIncludedBy "A relationship indicating that an InformationObject is a recording of an Event.")
SubObjectPropertyOf(SOMA:isRecordIncludedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isAbout>)
ObjectPropertyDomain(SOMA:isRecordIncludedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)
ObjectPropertyRange(SOMA:isRecordIncludedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:isSituationIncludedIn (is situation included in)

AnnotationAssertion(rdfs:comment SOMA:isSituationIncludedIn "A relation recording that a Situation participates in another in some role, or can be considered as a subsituation of the other.")
AnnotationAssertion(rdfs:label SOMA:isSituationIncludedIn "is situation included in")
SubObjectPropertyOf(SOMA:isSituationIncludedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasSetting>)
ObjectPropertyDomain(SOMA:isSituationIncludedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)
ObjectPropertyRange(SOMA:isSituationIncludedIn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)

# Object Property: SOMA:isSourceFor (is source for)

AnnotationAssertion(rdfs:comment SOMA:isSourceFor "The (transitive) relation between an information object and another which was derived from the former.")
AnnotationAssertion(rdfs:label SOMA:isSourceFor "is source for")
SubObjectPropertyOf(SOMA:isSourceFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#associatedWith>)
TransitiveObjectProperty(SOMA:isSourceFor)
ObjectPropertyDomain(SOMA:isSourceFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)
ObjectPropertyRange(SOMA:isSourceFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>)

# Object Property: SOMA:isTaskOfInputRole (is task of input role)

AnnotationAssertion(rdfs:comment SOMA:isTaskOfInputRole "A relation between a Task and one of its input roles.")
AnnotationAssertion(rdfs:label SOMA:isTaskOfInputRole "is task of input role"@en)
SubObjectPropertyOf(SOMA:isTaskOfInputRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isTaskOf>)
ObjectPropertyDomain(SOMA:isTaskOfInputRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)
ObjectPropertyRange(SOMA:isTaskOfInputRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)

# Object Property: SOMA:isTaskOfOutputRole (is task of output role)

AnnotationAssertion(rdfs:comment SOMA:isTaskOfOutputRole "A relation between a Task and one of its output roles.")
AnnotationAssertion(rdfs:label SOMA:isTaskOfOutputRole "is task of output role"@en)
SubObjectPropertyOf(SOMA:isTaskOfOutputRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isTaskOf>)
ObjectPropertyDomain(SOMA:isTaskOfOutputRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>)
ObjectPropertyRange(SOMA:isTaskOfOutputRole <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Role>)

# Object Property: SOMA:isTerminalSceneOf (is terminal scene of)

AnnotationAssertion(rdfs:comment SOMA:isTerminalSceneOf "A relation between StateTransitions and Scenes, which identifies the scene the transition is expected to end at.")
AnnotationAssertion(rdfs:label SOMA:isTerminalSceneOf "is terminal scene of")
SubObjectPropertyOf(SOMA:isTerminalSceneOf SOMA:isTerminalStateOf)
ObjectPropertyDomain(SOMA:isTerminalSceneOf SOMA:Scene)
ObjectPropertyRange(SOMA:isTerminalSceneOf SOMA:StateTransition)

# Object Property: SOMA:isTerminalStateOf (is terminal state of)

AnnotationAssertion(rdfs:comment SOMA:isTerminalStateOf "A relation recording that a Situation was where a Transition ended.")
AnnotationAssertion(rdfs:label SOMA:isTerminalStateOf "is terminal state of")
SubObjectPropertyOf(SOMA:isTerminalStateOf SOMA:isSituationIncludedIn)
ObjectPropertyDomain(SOMA:isTerminalStateOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)
ObjectPropertyRange(SOMA:isTerminalStateOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Transition>)

# Object Property: SOMA:meets (SOMA:meets)

AnnotationAssertion(SOMA:symbol SOMA:meets "m")
AnnotationAssertion(rdfs:comment SOMA:meets "A relation between entities, expressing a 'sequence' schema where one of the entities exactly ends where the other entity starts.")
SubObjectPropertyOf(SOMA:meets <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#directlyPrecedes>)
InverseObjectProperties(SOMA:meets SOMA:metBy)
AsymmetricObjectProperty(SOMA:meets)
IrreflexiveObjectProperty(SOMA:meets)
ObjectPropertyDomain(SOMA:meets <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:meets <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:metBy (met by)

AnnotationAssertion(SOMA:symbol SOMA:metBy "mi")
AnnotationAssertion(rdfs:comment SOMA:metBy "A relation between entities, expressing a 'sequence' schema where one of the entities exactly ends where the other entity starts.")
AnnotationAssertion(rdfs:label SOMA:metBy "met by"@en)
SubObjectPropertyOf(SOMA:metBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#directlyFollows>)
AsymmetricObjectProperty(SOMA:metBy)
IrreflexiveObjectProperty(SOMA:metBy)
ObjectPropertyDomain(SOMA:metBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:metBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:overlappedBy (overlapped by)

AnnotationAssertion(SOMA:symbol SOMA:overlappedBy "oi")
AnnotationAssertion(rdfs:comment SOMA:overlappedBy "A schematic relation between any entities that also implies ordering, e.g. \"she has worked into the night\".")
AnnotationAssertion(rdfs:label SOMA:overlappedBy "overlapped by")
SubObjectPropertyOf(SOMA:overlappedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#overlaps>)
InverseObjectProperties(SOMA:overlappedBy SOMA:overlappedOn)
AsymmetricObjectProperty(SOMA:overlappedBy)
IrreflexiveObjectProperty(SOMA:overlappedBy)
ObjectPropertyDomain(SOMA:overlappedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:overlappedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:overlappedOn (overlapped on)

AnnotationAssertion(SOMA:symbol SOMA:overlappedOn "o")
AnnotationAssertion(rdfs:comment SOMA:overlappedOn "A schematic relation between any entities that also implies ordering, e.g. \"she has worked into the night\".")
AnnotationAssertion(rdfs:label SOMA:overlappedOn "overlapped on")
SubObjectPropertyOf(SOMA:overlappedOn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#overlaps>)
AsymmetricObjectProperty(SOMA:overlappedOn)
IrreflexiveObjectProperty(SOMA:overlappedOn)
ObjectPropertyDomain(SOMA:overlappedOn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
ObjectPropertyRange(SOMA:overlappedOn <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)

# Object Property: SOMA:simultaneous (SOMA:simultaneous)

AnnotationAssertion(SOMA:symbol SOMA:simultaneous "=")
AnnotationAssertion(rdfs:comment SOMA:simultaneous "`A simultaneous B` means that A strictly starts and ends at the same time instant as B, i.e. their temporal extend is equal.")
SubObjectPropertyOf(SOMA:simultaneous SOMA:coOccurs)
SymmetricObjectProperty(SOMA:simultaneous)
TransitiveObjectProperty(SOMA:simultaneous)
ObjectPropertyDomain(SOMA:simultaneous <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:simultaneous <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:startedBy (started by)

AnnotationAssertion(SOMA:symbol SOMA:startedBy "si")
AnnotationAssertion(rdfs:comment SOMA:startedBy "`A starts B` means that A starts exactly where B starts, and that A strictly ends before B. As in \"I start my day with a coffee\".")
AnnotationAssertion(rdfs:label SOMA:startedBy "started by"@en)
SubObjectPropertyOf(SOMA:startedBy SOMA:coOccurs)
InverseObjectProperties(SOMA:startedBy SOMA:starts)
TransitiveObjectProperty(SOMA:startedBy)
ObjectPropertyDomain(SOMA:startedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:startedBy <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: SOMA:starts (SOMA:starts)

AnnotationAssertion(SOMA:symbol SOMA:starts "s")
AnnotationAssertion(rdfs:comment SOMA:starts "`A starts B` means that A starts exactly where B starts, and that A strictly ends before B. As in \"I start my day with a coffee\".")
SubObjectPropertyOf(SOMA:starts SOMA:coOccurs)
TransitiveObjectProperty(SOMA:starts)
ObjectPropertyDomain(SOMA:starts <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
ObjectPropertyRange(SOMA:starts <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Object Property: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#executesTask> (executes task)

SubObjectPropertyOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#executesTask> SOMA:isOccurrenceOf)

# Object Property: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isExecutedIn> (is executed in)

SubObjectPropertyOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#isExecutedIn> SOMA:isOccurringIn)


############################
#   Data Properties
############################

# Data Property: SOMA:hasDataFormat (SOMA:hasDataFormat)

AnnotationAssertion(rdfs:comment SOMA:hasDataFormat "A property linking an InformationRealization to a string specifying a format name, e.g. URDF or STL.")
SubDataPropertyOf(SOMA:hasDataFormat <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasDataValue>)
DataPropertyDomain(SOMA:hasDataFormat <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization>)
DataPropertyRange(SOMA:hasDataFormat xsd:string)

# Data Property: SOMA:hasEventBegin (has event begin)

AnnotationAssertion(rdfs:comment SOMA:hasEventBegin "A relation recording when an Event started. In this case, we think of the Event as something unfolding over some span of time.")
AnnotationAssertion(rdfs:label SOMA:hasEventBegin "has event begin")
SubDataPropertyOf(SOMA:hasEventBegin SOMA:hasEventTime)
DataPropertyDomain(SOMA:hasEventBegin <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
DataPropertyRange(SOMA:hasEventBegin xsd:double)

# Data Property: SOMA:hasEventEnd (has event end)

AnnotationAssertion(rdfs:comment SOMA:hasEventEnd "A relation recording when an Event ended. In this case, we think of the Event as something unfolding over some span of time.")
AnnotationAssertion(rdfs:label SOMA:hasEventEnd "has event end")
SubDataPropertyOf(SOMA:hasEventEnd SOMA:hasEventTime)
DataPropertyDomain(SOMA:hasEventEnd <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
DataPropertyRange(SOMA:hasEventEnd xsd:double)

# Data Property: SOMA:hasEventTime (has event time)

AnnotationAssertion(rdfs:comment SOMA:hasEventTime "Superproperty of hasEventBegin and hasEventEnd, records that an Event happened, or was happening, at a particular time. Using the subproperties captures the richer semantics of that time relative to the event. Using only this superproperty may be appropriate when the Event is construed to take place at a single instant of time.")
AnnotationAssertion(rdfs:label SOMA:hasEventTime "has event time")
SubDataPropertyOf(SOMA:hasEventTime <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasDataValue>)
DataPropertyDomain(SOMA:hasEventTime <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
DataPropertyRange(SOMA:hasEventTime xsd:double)

# Data Property: SOMA:hasIntervalBegin (has interval begin)

AnnotationAssertion(rdfs:comment SOMA:hasIntervalBegin "A relation recording when some TimeInterval started.")
AnnotationAssertion(rdfs:label SOMA:hasIntervalBegin "has interval begin")
SubDataPropertyOf(SOMA:hasIntervalBegin SOMA:hasIntervalTime)
DataPropertyDomain(SOMA:hasIntervalBegin <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#TimeInterval>)
DataPropertyRange(SOMA:hasIntervalBegin xsd:float)

# Data Property: SOMA:hasIntervalEnd (has interval end)

AnnotationAssertion(rdfs:comment SOMA:hasIntervalEnd "A relation recording when a TimeInterval ended.")
AnnotationAssertion(rdfs:label SOMA:hasIntervalEnd "has interval end")
SubDataPropertyOf(SOMA:hasIntervalEnd SOMA:hasIntervalTime)
DataPropertyDomain(SOMA:hasIntervalEnd <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#TimeInterval>)
DataPropertyRange(SOMA:hasIntervalEnd xsd:float)

# Data Property: SOMA:hasIntervalTime (has interval time)

AnnotationAssertion(rdfs:comment SOMA:hasIntervalTime "Superproperty of relations used to connect moments in time to a TimeInterval.")
AnnotationAssertion(rdfs:label SOMA:hasIntervalTime "has interval time")
SubDataPropertyOf(SOMA:hasIntervalTime <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasRegionDataValue>)
DataPropertyDomain(SOMA:hasIntervalTime <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#TimeInterval>)
DataPropertyRange(SOMA:hasIntervalTime xsd:float)

# Data Property: SOMA:hasNameString (has name string)

AnnotationAssertion(rdfs:comment SOMA:hasNameString "A relation recording some identifier associated to an Entity.")
AnnotationAssertion(rdfs:label SOMA:hasNameString "has name string")
SubDataPropertyOf(SOMA:hasNameString <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasDataValue>)
DataPropertyDomain(SOMA:hasNameString <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity>)
DataPropertyRange(SOMA:hasNameString xsd:string)

# Data Property: SOMA:hasPersistentIdentifier (SOMA:hasPersistentIdentifier)

AnnotationAssertion(rdfs:comment SOMA:hasPersistentIdentifier "A property linking an InformationRealization to a persistent identifier such as a DOI, which can then be used to obtain an address at which the realization (i.e. digital file) can be retrieved.")
SubDataPropertyOf(SOMA:hasPersistentIdentifier <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasDataValue>)
DataPropertyDomain(SOMA:hasPersistentIdentifier <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization>)
DataPropertyRange(SOMA:hasPersistentIdentifier xsd:string)

# Data Property: SOMA:isReificationOf (is reification of)

AnnotationAssertion(rdfs:comment SOMA:isReificationOf "An auxiliary property that is used to generate object individuals, called reifications, from any other Entity, e.g. from relations, classes, data types. These reifications can then be used in DL axioms as any other named individual.")
AnnotationAssertion(rdfs:label SOMA:isReificationOf "is reification of")
SubDataPropertyOf(SOMA:isReificationOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasDataValue>)
DataPropertyDomain(SOMA:isReificationOf <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>)
DataPropertyRange(SOMA:isReificationOf xsd:anyURI)


############################
#   Datatypes
############################

# Datatype: SOMA:array_boolean (SOMA:array_boolean)

DatatypeDefinition(SOMA:array_boolean xsd:string)

# Datatype: SOMA:array_double (SOMA:array_double)

DatatypeDefinition(SOMA:array_double xsd:string)

# Datatype: SOMA:array_float (SOMA:array_float)

DatatypeDefinition(SOMA:array_float xsd:string)

# Datatype: SOMA:array_int (SOMA:array_int)

DatatypeDefinition(SOMA:array_int xsd:string)

# Datatype: SOMA:array_string (SOMA:array_string)

DatatypeDefinition(SOMA:array_string xsd:string)

# Datatype: SOMA:array_uint (SOMA:array_uint)

DatatypeDefinition(SOMA:array_uint xsd:string)


############################
#   Classes
############################

# Class: SOMA:Accident (SOMA:Accident)

AnnotationAssertion(rdfs:comment SOMA:Accident "An Event for which causes are unknown and/or considered irrelevant. This is true also for \"final causes\" (that is, intentions) of Agents participating in the Accident: it is not the intentions of these Agents to bring about the Accident.

Note a distinction between this definition and some informal, everyday uses of \"accident\" which require a causal structure and responsibility to be ascertained. An accident, in the informal sense, may require an explanation as to who made a mistake in bringing about the event; a \"traffic accident\", where we want to know who's responsible, is an example of this.

Such an event does NOT fall under the definition of Accident here. An example of Accident would be a fair coin landing Heads: the causal chain for why this exact face landed is not important, all that matters is the brute fact that the coin landed Heads.")
AnnotationAssertion(rdfs:comment SOMA:Accident "also think about \"mistakes\": (Mihai:) yes, but consider whether those might qualify as Situations. Likewise for Accidents, actually.")
SubClassOf(SOMA:Accident <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)
DisjointClasses(SOMA:Accident <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Action>)

# Class: SOMA:ActionExecutionPlan (Action execution plan)

AnnotationAssertion(rdfs:comment SOMA:ActionExecutionPlan "idea: steps in workflows assert that they are defined by action execution plans.")
AnnotationAssertion(rdfs:comment SOMA:ActionExecutionPlan "links role and parameter fillers to e.g. slots in a data structure")
AnnotationAssertion(rdfs:label SOMA:ActionExecutionPlan "Action execution plan"@en)
SubClassOf(SOMA:ActionExecutionPlan <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Plan>)
SubClassOf(SOMA:ActionExecutionPlan ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#definesTask> ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasParameter> SOMA:Status)))

# Class: SOMA:Amateurish (SOMA:Amateurish)

AnnotationAssertion(rdfs:comment SOMA:Amateurish "A description of amateurish behavior.")
SubClassOf(SOMA:Amateurish SOMA:DexterityDiagnosis)
DisjointClasses(SOMA:Amateurish SOMA:Masterful)

# Class: SOMA:BehavioralDiagnosis (Behavioral diagnosis)

AnnotationAssertion(rdfs:comment SOMA:BehavioralDiagnosis "A diagnosis of how a system interacts with its world.")
AnnotationAssertion(rdfs:label SOMA:BehavioralDiagnosis "Behavioral diagnosis")
SubClassOf(SOMA:BehavioralDiagnosis <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Diagnosis>)
SubClassOf(SOMA:BehavioralDiagnosis ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasConstituent> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Goal>))

# Class: SOMA:Clumsiness (SOMA:Clumsiness)

AnnotationAssertion(rdfs:comment SOMA:Clumsiness "A description of clumsy behavior.")
SubClassOf(SOMA:Clumsiness SOMA:Amateurish)

# Class: SOMA:DexterityDiagnosis (Dexterity diagnosis)

AnnotationAssertion(rdfs:comment SOMA:DexterityDiagnosis "A description of the dexterity of a system, possibly in comparison to another system.")
AnnotationAssertion(rdfs:label SOMA:DexterityDiagnosis "Dexterity diagnosis")
SubClassOf(SOMA:DexterityDiagnosis SOMA:BehavioralDiagnosis)

# Class: SOMA:Episode (SOMA:Episode)

AnnotationAssertion(rdfs:comment SOMA:Episode "")
SubClassOf(SOMA:Episode <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Situation>)

# Class: SOMA:FailedAttempt (Failed attempt)

AnnotationAssertion(rdfs:comment SOMA:FailedAttempt "A description of a failed attempt to achieve some goal.")
AnnotationAssertion(rdfs:label SOMA:FailedAttempt "Failed attempt"@en)
SubClassOf(SOMA:FailedAttempt SOMA:Unsuccessfulness)

# Class: SOMA:Fluid (SOMA:Fluid)

AnnotationAssertion(rdfs:comment SOMA:Fluid "A substance with a consistency such that it can flow or diffuse.")
SubClassOf(SOMA:Fluid <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Substance>)

# Class: SOMA:Foolishness (SOMA:Foolishness)

AnnotationAssertion(rdfs:comment SOMA:Foolishness "A description of foolish behavior.")
SubClassOf(SOMA:Foolishness SOMA:Amateurish)

# Class: SOMA:FunctionalDiagnosis (Functional diagnosis)

AnnotationAssertion(rdfs:comment SOMA:FunctionalDiagnosis "An internal diagnosis of a system.")
AnnotationAssertion(rdfs:label SOMA:FunctionalDiagnosis "Functional diagnosis")
SubClassOf(SOMA:FunctionalDiagnosis <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Diagnosis>)

# Class: SOMA:HardwareDiagnosis (Hardware diagnosis)

AnnotationAssertion(rdfs:comment SOMA:HardwareDiagnosis "A diagnosis of the hardware of a system.")
AnnotationAssertion(rdfs:label SOMA:HardwareDiagnosis "Hardware diagnosis")
SubClassOf(SOMA:HardwareDiagnosis SOMA:TechnicalDiagnosis)

# Class: SOMA:HumanActivityRecording (SOMA:HumanActivityRecording)

AnnotationAssertion(rdfs:comment SOMA:HumanActivityRecording "An episode in which one or more human beings perform an activity and are recorded doing so.")
SubClassOf(SOMA:HumanActivityRecording SOMA:RecordedEpisode)

# Class: SOMA:Inability (SOMA:Inability)

AnnotationAssertion(rdfs:comment SOMA:Inability "A description of a situation with a goal that some system is unable to achieve.")
SubClassOf(SOMA:Inability SOMA:Unsuccessfulness)

# Class: SOMA:Infeasibility (SOMA:Infeasibility)

AnnotationAssertion(rdfs:comment SOMA:Infeasibility "A description of a situation with a goal that is impossible to achieve in some situational context.")
SubClassOf(SOMA:Infeasibility SOMA:Unsuccessfulness)

# Class: SOMA:Masterful (SOMA:Masterful)

AnnotationAssertion(rdfs:comment SOMA:Masterful "A description of masterful behavior.")
SubClassOf(SOMA:Masterful SOMA:DexterityDiagnosis)

# Class: SOMA:MedicalDiagnosis (Medical diagnosis)

AnnotationAssertion(rdfs:comment SOMA:MedicalDiagnosis "A functional diagnosis of an organism.")
AnnotationAssertion(rdfs:label SOMA:MedicalDiagnosis "Medical diagnosis")
SubClassOf(SOMA:MedicalDiagnosis SOMA:FunctionalDiagnosis)
SubClassOf(SOMA:MedicalDiagnosis ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasConstituent> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Organism>))
DisjointClasses(SOMA:MedicalDiagnosis SOMA:TechnicalDiagnosis)

# Class: SOMA:RecordedEpisode (SOMA:RecordedEpisode)

AnnotationAssertion(rdfs:comment SOMA:RecordedEpisode "An episode which has been recorded.")
SubClassOf(SOMA:RecordedEpisode SOMA:Episode)
SubClassOf(SOMA:RecordedEpisode ObjectSomeValuesFrom(SOMA:includesRecord <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject>))

# Class: SOMA:Reification (SOMA:Reification)

AnnotationAssertion(rdfs:comment SOMA:Reification "A description that *describes* a formal entity.")
SubClassOf(SOMA:Reification <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Description>)
SubClassOf(SOMA:Reification DataExactCardinality(1 SOMA:isReificationOf xsd:anyURI))

# Class: SOMA:Sluggishness (SOMA:Sluggishness)

AnnotationAssertion(rdfs:comment SOMA:Sluggishness "A description of sluggish behavior.")
SubClassOf(SOMA:Sluggishness SOMA:Amateurish)

# Class: SOMA:SoftwareDiagnosis (Software diagnosis)

AnnotationAssertion(rdfs:comment SOMA:SoftwareDiagnosis "A diagnosis of the software of a system.")
AnnotationAssertion(rdfs:label SOMA:SoftwareDiagnosis "Software diagnosis")
SubClassOf(SOMA:SoftwareDiagnosis SOMA:TechnicalDiagnosis)

# Class: SOMA:State (SOMA:State)

AnnotationAssertion(rdfs:comment SOMA:State "States are stative and homeomeric events.

For stative events, the mereological sum of two instances has the same type as both instances. This is, for example, the state of sitting on a chair, or the process of a pendulum swinging around.

The difference between states and processes is that states are, in addition, homeomeric, and processes are not.  This means that, when considering time slices  of an event, for states, these time slices always have the same type as the state, but for processes this is not the case.")
SubClassOf(SOMA:State <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event>)

# Class: SOMA:StateTransition (SOMA:StateTransition)

SubClassOf(SOMA:StateTransition ObjectSomeValuesFrom(SOMA:hasInitialScene SOMA:Scene))
SubClassOf(SOMA:StateTransition ObjectSomeValuesFrom(SOMA:hasTerminalScene SOMA:Scene))

# Class: SOMA:Status (SOMA:Status)

AnnotationAssertion(rdfs:comment SOMA:Status "A role that can be played by some parameter which indicates the state of affairs of some entity, e.g. a flag describing the outcome of an action in terms of success or failure, or an indicator of whether a device is turned on or off.")
SubClassOf(SOMA:Status <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter>)

# Class: SOMA:SuccessDiagnosis (Success diagnosis)

AnnotationAssertion(rdfs:comment SOMA:SuccessDiagnosis "A diagnosis of the fullfilment of a goal that motivates the behavior of a system.")
AnnotationAssertion(rdfs:label SOMA:SuccessDiagnosis "Success diagnosis")
SubClassOf(SOMA:SuccessDiagnosis SOMA:BehavioralDiagnosis)

# Class: SOMA:Successfulness (SOMA:Successfulness)

AnnotationAssertion(rdfs:comment SOMA:Successfulness "A description of a situation with a goal that was achieved by some system.")
SubClassOf(SOMA:Successfulness SOMA:SuccessDiagnosis)
DisjointClasses(SOMA:Successfulness SOMA:Unsuccessfulness)

# Class: SOMA:TechnicalDiagnosis (Technical diagnosis)

AnnotationAssertion(rdfs:comment SOMA:TechnicalDiagnosis "A functional diagnosis of a technical system.")
AnnotationAssertion(rdfs:label SOMA:TechnicalDiagnosis "Technical diagnosis")
SubClassOf(SOMA:TechnicalDiagnosis SOMA:FunctionalDiagnosis)
SubClassOf(SOMA:TechnicalDiagnosis ObjectSomeValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#hasConstituent> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#DesignedArtifact>))

# Class: SOMA:Threshold (SOMA:Threshold)

AnnotationAssertion(rdfs:comment SOMA:Threshold "A role played by a parameter which indicates some value that, when crossed, triggers some condition.")
SubClassOf(SOMA:Threshold <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Parameter>)

# Class: SOMA:Unsuccessfulness (SOMA:Unsuccessfulness)

AnnotationAssertion(rdfs:comment SOMA:Unsuccessfulness "A description of a situation with a goal that was not or not fully achieved by some system.")
SubClassOf(SOMA:Unsuccessfulness SOMA:SuccessDiagnosis)

# Class: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Action> (Action)

AnnotationAssertion(rdfs:comment <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Action> "The EASE view: an Action is an Event in which an Agent executes some Task, typically defined by a Workflow, towards the achievement of some Goal.")
SubClassOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Action> ObjectAllValuesFrom(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#executesTask> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>))

# Class: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject> (Information object)

AnnotationAssertion(rdfs:comment <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationObject> "In SOMA-compliant systems, the way to use InformationObjects to specify extra data about an individual entity is to employ the 'is about' and 'expresses' properties (or their inverses 'is reference of' and 'is expressed by') and to supply a persistent identifier for a realization of the InformationObject.

As a prototypical example, consider an individual called Action_XYZ, about which we have some data for which the meaning is described by Description_ABC. The data would be an individual InformationObject_DEF, and the following property assertions would hold:

InformationObject_DEF 'is about' Action_XYZ
InformationObject_DEF expresses Description_ABC


Usually, an individual InformationObject would be connected to (at least) an InformationRealization individual. For example, suppose there is such an InformationRealization individual, InformationRealization_123. Then, this individual will have data properties describing its format and persistent identifier

InformationRealization_123 hasPersistentIdentifier 'doi'
InformationRealization_123 hasDataFormat 'urdf'")

# Class: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization> (Information realization)

AnnotationAssertion(rdfs:comment <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization> "In SOMA-compliant systems, the way to use InformationObjects to specify extra data about an individual entity is to employ the 'is about' and 'expresses' properties (or their inverses 'is reference of' and 'is expressed by') and to supply a persistent identifier for a realization of the InformationObject.

As a prototypical example, consider an individual called Action_XYZ, about which we have some data for which the meaning is described by Description_ABC. The data would be an individual InformationObject_DEF, and the following property assertions would hold:

InformationObject_DEF 'is about' Action_XYZ
InformationObject_DEF expresses Description_ABC


Usually, an individual InformationObject would be connected to (at least) an InformationRealization individual. For example, suppose there is such an InformationRealization individual, InformationRealization_123. Then, this individual will have data properties describing its format and persistent identifier

InformationRealization_123 hasPersistentIdentifier 'doi'
InformationRealization_123 hasDataFormat 'urdf'")
SubClassOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization> DataSomeValuesFrom(SOMA:hasPersistentIdentifier xsd:string))
SubClassOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationRealization> DataExactCardinality(1 SOMA:hasDataFormat xsd:string))

# Class: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Plan> (Plan)

SubClassOf(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Plan> ObjectSomeValuesFrom(SOMA:isPlanFor <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Task>))


############################
#   Named Individuals
############################

# Individual: SOMA:RDFType (SOMA:RDFType)

ClassAssertion(SOMA:Reification SOMA:RDFType)
DataPropertyAssertion(SOMA:isReificationOf SOMA:RDFType "http://www.w3.org/2001/XMLSchema#type"^^xsd:anyURI)


AnnotationAssertion(rdfs:label <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#realizesSelfInformation> "realizes self information"@en)
)